import React, {useState} from "react";
import PropTypes from 'prop-types'
import { MainContainer, InnerContainer, Column, StyledInput, Row, StyledTitle, StyledClearIcon,
    StyledSubTitle, StyledRadio, Card, CardTitle, Footer, MainColumn, MaxHeightDiv, FooterColumn, PriceTitle,
    StyledButton, ButtonText } from './comboPage.styled'
import RadioGroup from '@mui/material/RadioGroup';
import Grid from '@mui/material/Grid';
import FormControl from '@mui/material/FormControl';
import { useTheme } from '@mui/material/styles'
import { getHttpResponse } from "../../api/helper";

const ComboPage = ({selectedComboItem, clearComboPage,  addComboToCartHandler, catalogId, companyBranchId, setAlert})=> {
    const [combo, setCombo] = useState()
    const theme = useTheme();
    const [selectedProductIndexes, setSelectedProductIndexes] = useState()
    const [comboQuantity, setComboQuantity] = useState(1)
    const isPriceVariable = isNaN(selectedComboItem.price)
    const [accPrice, setAccPrice] = useState(0)
    const [hasAdditional, setHasAdditional] = useState(false)

    const getCombo = async () => {
        try{
            const response = await getHttpResponse(`item-service/combo/${selectedComboItem.id}?catalogId=${catalogId}&companybranchid=${companyBranchId}`)
            setCombo(response.data)
            console.log(response.data?.sections)
            setSelectedProductIndexes(response.data?.sections.map(() => -1))
        }
        catch(error){
            clearComboPage()
            setAlert({open: true, severity: 'error', message: error?.message || 'OcurriÃ³ un error buscando los datos', duration: 3000})
        }
    }

    useState(() => {
        getCombo()
    }, [])

    const addCombo = () => {
        const sections = selectedProductIndexes.map((value, index) => {
            if (value === -1) return null
            return {
                id: combo.sections[index]?.sectionId,
                variantId: combo.sections[index]?.products[value]?.id
            }
        }).filter(section => !!section)
        addComboToCartHandler({
            ...selectedComboItem,
            selectedProductIndexes,
            quantity: comboQuantity, 
            sections,
            price: isPriceVariable ? accPrice.toFixed(2).toString() : selectedComboItem.price
        })
    }
 

    const radioChangeHandler = (value, sectionIndex) => {
        let thisHasAdditional = false
        console.log(value, sectionIndex)
        const newState = [...selectedProductIndexes];
        if (combo.sections[sectionIndex].additional){
            if (newState[sectionIndex] === -1){
                const selectedAdditionals = combo.sections[sectionIndex].products.map((product, index) => {if (index === value) {return 1} else return -1}) // The index of the product selected in the additionals section is set to 1, in this array; otherwise, it is set to -1
                newState[sectionIndex] = selectedAdditionals
            }
            else{
                if (newState[sectionIndex][value] === 1) {
                    newState[sectionIndex][value] = -1
                }else{
                    newState[sectionIndex][value] = 1
                }
            }
            if (newState[sectionIndex].some(index => index === 1)) {
                thisHasAdditional = true
                setHasAdditional(true)
            }else{
                setHasAdditional(false)
            }
        }else{
            newState[sectionIndex] = value
        }
        
        (isPriceVariable || thisHasAdditional) && setAccPrice(newState.reduce((acc, current, index) => {
            let price = 0
            if (current.length){
                for (let i = 0; i< current.length; i++){
                    const productPrice = current[i] === 1 ? combo.sections[index].products[i].price : 0
                    price += (productPrice ? productPrice * 1 : 0 )
                }
            }else{
            if (current === -1) return acc + 0
             price = combo.sections[index].products[current].price     
            }       
            return acc + (price ? price * 1 : 0 )
        },0))
        setSelectedProductIndexes(newState)
    }

    return <MainContainer>
        <InnerContainer>
            {combo && <MainColumn>
                <MaxHeightDiv>
                    <Column>
                        <Row>
                            <Row>
                                <StyledInput sx={{ input: { color: '#696969' } }} value={comboQuantity} disableUnderline type='number' onChange={(e) => e.target.value > 0 && setComboQuantity(e.target.value) }/>
                                <StyledTitle>
                                    {selectedComboItem.name}
                                </StyledTitle>
                            </Row>
                        <div>
                            <StyledClearIcon onClick={clearComboPage} />
                        </div>
                        </Row>
                        {
                            combo.sections?.map((section, sectionIndex) => {
                                return <div key={section.sectionId}>
                                        <StyledSubTitle> {section.name} </StyledSubTitle>
                                        <FormControl style={{width: '100%'}}>
                                        <RadioGroup
                                            value={selectedProductIndexes[sectionIndex]}
                                            onChange={() => {}}
                                        >
                                            <Grid container spacing={2}>
                                            {section.products.map((product, productIndex) => <Grid item key={product.id} xs={12} md={3}>
                                                <Card onClick={() => radioChangeHandler(productIndex, sectionIndex)} selected = {selectedProductIndexes[sectionIndex] === productIndex} selectedColor = {theme.palette.secondary.main}>
                                                    <CardTitle selected = {selectedProductIndexes[sectionIndex] === productIndex}>{`${product.name}${product.price*1 > 0 ? ` (${(product.price*1).toFixed(2)})` : '' }`}</CardTitle>
                                                    <StyledRadio sx={{
                                                        '&.Mui-checked': {
                                                            color: 'white',
                                                        },
                                                        }} 
                                                        value={productIndex} />
                                                </Card>
                                            </Grid>
                                            )}
                                            </Grid>
                                        </RadioGroup>
                                        </FormControl>
                                    </div>
                            })
                        }
                    </Column>
                </MaxHeightDiv>
                <Footer>
                    <FooterColumn>
                        <PriceTitle>{`RD$ ${(isPriceVariable || hasAdditional) ? accPrice === 0 ? selectedComboItem.price : accPrice.toFixed(2) : (selectedComboItem.price * comboQuantity).toFixed(2)}`}</PriceTitle>
                        <StyledButton  onClick={addCombo} disabled={selectedProductIndexes.filter((value, index) => combo.sections[index].additional === false).some(index => index === -1)} sx={{
                            "&.Mui-disabled": {
                                pointerEvents: "unset", 
                                cursor: "not-allowed"
                            }
                        }}>
                            <ButtonText>Agregar al Carrito</ButtonText>
                        </StyledButton>
                    </FooterColumn>
                </Footer>
            </MainColumn> }
        </InnerContainer>
    </MainContainer>
}

ComboPage.propTypes = {
    selectedComboItem: PropTypes.object.isRequired,
    clearComboPage: PropTypes.func,
    addComboToCartHandler: PropTypes.func,
    setAlert: PropTypes.func,
    catalogId: PropTypes.number.isRequired,
    companyBranchId: PropTypes.number.isRequired,
}

export default ComboPage