/**
 * Created by mtorres on 10/16/2018.
 */

var paymentMethods = $("#contPaymentTypes");
var messageBeforeAddProduct = $(".messageBeforeAddProduct");
var paymentMethodsButtons = $("#contPaymentTypes .paymentMethodButtons");
var accountTypeTabs = $(".accountTypeContainer #accountTypes li a");
var totalsListGroup = $(".contShoppingCart .totals");


$(document).ready(function(){
    verticalAlign();

    if(responsive()){

        functionalitySwipe();
    }
});

function functionalitySwipe(){
    var supportTouch = $.support.touch,
        scrollEvent = "touchmove scroll",
        touchStartEvent = supportTouch ? "touchstart" : "mousedown",
        touchStopEvent = supportTouch ? "touchend" : "mouseup",
        touchMoveEvent = supportTouch ? "touchmove" : "mousemove";
    $.event.special.swipeupdown = {
        setup: function() {
            var thisObject = this;
            var $this = $(thisObject);
            $this.bind(touchStartEvent, function(event) {
                var data = event.originalEvent.touches ?
                        event.originalEvent.touches[ 0 ] :
                        event,
                    start = {
                        time: (new Date).getTime(),
                        coords: [ data.pageX, data.pageY ],
                        origin: $(event.target)
                    },
                    stop;

                function moveHandler(event) {
                    if (!start) {
                        return;
                    }
                    var data = event.originalEvent.touches ?
                        event.originalEvent.touches[ 0 ] :
                        event;
                    stop = {
                        time: (new Date).getTime(),
                        coords: [ data.pageX, data.pageY ]
                    };

                    // prevent scrolling
                    if (Math.abs(start.coords[1] - stop.coords[1]) > 10) {
                        event.preventDefault();
                    }
                }
                $this
                    .bind(touchMoveEvent, moveHandler)
                    .one(touchStopEvent, function(event) {
                        $this.unbind(touchMoveEvent, moveHandler);
                        if (start && stop) {
                            if (stop.time - start.time < 1000 &&
                                Math.abs(start.coords[1] - stop.coords[1]) > 30 &&
                                Math.abs(start.coords[0] - stop.coords[0]) < 75) {
                                start.origin
                                    .trigger("swipeupdown")
                                    .trigger(start.coords[1] > stop.coords[1] ? "swipeup" : "swipedown");
                            }
                        }
                        start = stop = undefined;
                    });
            });
        }
    };
    $.each({
        swipedown: "swipeupdown",
        swipeup: "swipeupdown"
    }, function(event, sourceEvent){
        $.event.special[event] = {
            setup: function(){
                $(this).bind(sourceEvent, $.noop);
            }
        };
    });

    var userInfo = $('#userInfo');
    userInfo.on('swipeup',function(){if(responsive()){showShoppingCartMobile()}} );
    userInfo.on('swipedown',function(){if(responsive()){hideShoppingCartMobile()}} );
    userInfo.on("click", function(e){if(responsive()){switchShoppingCartMobile(e)};});
}

$(window).resize(function(){
    let wrapShoppingCart = $(".wrapShoppingCart");
    let contShoppingCart = $(".contShoppingCart");
    if(!responsive()){
        wrapShoppingCart.removeAttr("style");
    }else{
        if(contShoppingCart.hasClass("empty")){
            contShoppingCart.removeAttr("style");
        }else{
            hideShoppingCartMobile();
        }
        functionalitySwipe();
    }

    if($(".checkoutDesktop").is(':visible') && responsive()){
        checkOutShoppingCart($("#checkoutButton"));
    }
    if($(".checkoutMobile").is(':visible') && !responsive()){
        checkOutShoppingCart($("#checkoutButton"));
    }
    setTimeout(function() {
        verticalAlign();
    }, 300);
});

function switchShoppingCartMobile(e){
    e.stopImmediatePropagation();
    let wrapShoppingCart = $(".wrapShoppingCart");
    if(wrapShoppingCart.hasClass("active")){
        hideShoppingCartMobile();
    }else{
        showShoppingCartMobile();
    }
}

function showShoppingCartMobile(e){
    let mainContent = $(".mainContent").offset();
    let wrapShoppingCart = $(".wrapShoppingCart");
    wrapShoppingCart.css("top", mainContent.top + parseInt($(".mainContent").css("padding-top"))).addClass("active");

    if(e){
        e.stopPropagation();
    }
}

var companyAndBranchSelected = JSON.parse(sessionStorage.getItem('companyAndBranchSelected')) || [];

function hideShoppingCartMobile(){
    let wrapShoppingCart = $(".wrapShoppingCart");
    let windowHeight = $(window).height();
    let userInfo = $("#userInfo").outerHeight();
    let contPaymentTypes = 0;
    let userSelected = JSON.parse(sessionStorage.getItem('userSelected')) || null;
    var companyAndBranchSelected = JSON.parse(sessionStorage.getItem('companyAndBranchSelected')) || [];

    if(companyAndBranchSelected.vendor.cash || companyAndBranchSelected.vendor.acceptCard){
        if($("#enterpriseAccount").hasClass("active")){
            contPaymentTypes = 0;
        }else{
            contPaymentTypes = 51;
        }
    }
    let contShoppingCart = $(".contShoppingCart");
    if(responsive()){
        contShoppingCart.height(windowHeight - $(".header").height() - (parseInt($(".mainContent").css("padding-top")) * 2) - 1 );
        var accountTypeContainer = 0;
        if(userSelected.companyAccount == true){
            accountTypeContainer = $(".accountTypeContainer").height();
        }
        if(contPaymentTypes == 0){
            wrapShoppingCart.css("top", windowHeight - userInfo - accountTypeContainer).removeClass("active");
            $("#listProductsComponent").css("padding-bottom", userInfo + accountTypeContainer);
        }else{
            wrapShoppingCart.css("top", windowHeight - userInfo - contPaymentTypes - accountTypeContainer - parseInt($("#contPaymentTypes").css("padding-bottom"))).removeClass("active");
            $("#listProductsComponent").css("padding-bottom", userInfo + contPaymentTypes + accountTypeContainer);
        }
    }
}
function verticalAlign(){
    if(!responsive()){
        var userSelected = JSON.parse(sessionStorage.getItem('userSelected')) || null;
        var mainHeight = $(window).height() - $(".header").height() - (parseInt($(".mainContent").css("padding-top")) * 2) - 1;
        var contShoppingCart = $(".contShoppingCart");
        var shoppingCartListProducts = $("#shoppingCartListProducts");
        var userInfoHeight = $("#userInfo").outerHeight();

        var accountTypeContainer = 0;
        if(userSelected != null){
            if(userSelected.companyAccount == true){
                accountTypeContainer = $(".accountTypeContainer").height();
            }
        }

        var contentTotals = $(".totals").height();
        if($("#contPaymentTypes").is(":visible")){

            var contPaymentTypes = $("#contPaymentTypes").outerHeight() + parseInt($("#contPaymentTypes").css("margin-bottom"));
        }else{
            var contPaymentTypes = 0;
        }

        var isPharmacy = JSON.parse(sessionStorage.getItem('isPharmacy'));
        if(isPharmacy == true && $("#arsBenefit").hasClass("d-block")){
            var arsBenefitHeight = $("#arsBenefit").outerHeight();
        }else{
            var arsBenefitHeight = 0;
        }
        if(isPharmacy == true && $("#arsBenefitBox").hasClass("d-block")){
            var arsBenefitBoxHeight = $("#arsBenefitBox").outerHeight();
        }else{
            var arsBenefitBoxHeight = 0;
        }
        var container = parseInt($(".contShoppingCart .container").css("padding-top")) * 2;

        contShoppingCart.height(mainHeight);
        shoppingCartListProducts.innerHeight(mainHeight - parseInt($("#shoppingCartListProducts").css("margin-bottom")) - userInfoHeight - accountTypeContainer - contentTotals - contPaymentTypes - container - arsBenefitHeight - arsBenefitBoxHeight);

    }
}

function checkShoppingCart(){
    var productsSelected = JSON.parse(sessionStorage.getItem('productsSelected')) || [];
    if(productsSelected.length > 0){
        renderProductsOnTheShoppingCart();
    }
}

function addProductToShoppingCart(product){
    if(responsive()){
        animationAdd(product);
    }
    if(hasUserActive() == true){
        var productsSelected = JSON.parse(sessionStorage.getItem('productsSelected')) || [];
        var userSelectedBenefits = JSON.parse(sessionStorage.getItem('userSelected')) || [];
        sessionStorage.removeItem('giftCardsSaved');
        splitCalculation(product, productsSelected, userSelectedBenefits, function(split) {
            if(split != false){
                renderProductsOnTheShoppingCart();
                var isPharmacy = sessionStorage.getItem('isPharmacy');
                if(isPharmacy == 'true') {
                    $('input.d-lg-block:nth-child(2)').val('');
                    $('input.d-lg-block:nth-child(2)').focus();
                }
            }else{
                //validationMessage('', 'cartItemAddedValidation');
                //setTimeout(function() {
                //    $("#cartItemAdded").removeClass("fadeInDown").addClass("fadeOutUp");
                //    setTimeout(function() {
                //        $("#cartItemAdded").remove();
                //    }, 300)
                //}, 4000);
                messageNoBalance();
            }
        });
    }else{
        alert('selecciona un usuario');
    }
}

function animationAdd(product){
    let windowHeight = $(window).height();
    let userInfo = $("#userInfo").outerHeight();

    var element = $("#" + product.id);
    var iconShoppingcart = $(".qtyShoppingCart");

    let productX = element.offset().top - $(window).scrollTop();
    let productY = element.position().left;
    let userSelected = JSON.parse(sessionStorage.getItem('userSelected')) || [];

    element.clone().insertBefore(element).addClass("animationAdd").css({"left": productY + 15, "top": productX, "width": element.width()});


    let elementY = iconShoppingcart.offset().left;

    let contPaymentTypes = 0;
    var companyAndBranchSelected = JSON.parse(sessionStorage.getItem('companyAndBranchSelected')) || [];
    if(companyAndBranchSelected.vendor.cash){
        if($("#contPaymentTypes").outerHeight() == 0){
            contPaymentTypes = 51;
        }else{
            contPaymentTypes = $("#contPaymentTypes").outerHeight();
        }
    }
    if(responsive()){
        var animationAdd = $(".animationAdd");
        var accountTypeContainer = 0;
        if(userSelected.companyAccount == true){
            accountTypeContainer = $(".accountTypeContainer").height();
        }
        if(contPaymentTypes == 0){
            animationAdd.animate({
                left: elementY,
                top: windowHeight - userInfo - parseInt($("#userInfo").css("padding-top")) - accountTypeContainer + 16,
                width: "23px",
                height: "23px"
            }, 500, function() {
                animationAdd.animate({opacity: "0"}, 500, function() {
                    animationAdd.remove();
                    quantityProductsIcon();
                });
            });
        }else{
            animationAdd.animate({
                left: elementY,
                top: windowHeight - userInfo - contPaymentTypes - parseInt($("#userInfo").css("padding-top")) - accountTypeContainer - 2,
                width: "23px",
                height: "23px"
            }, 500, function() {
                animationAdd.animate({opacity: "0"}, 500, function() {
                    animationAdd.remove();
                    quantityProductsIcon();
                });
            });
        }
    }
}

function splitCalculation(product, productSelected, userSelectedBenefits, callback ){
    var isPharmacy = JSON.parse(sessionStorage.getItem('isPharmacy'));
    var productsSelected = productSelected || [];
    var catalogSelected = JSON.parse(sessionStorage.getItem('catalogSelected'));
    var companyAndBranchSelected = JSON.parse(sessionStorage.getItem('companyAndBranchSelected'));

    if(isPharmacy == true){
        if(product.length != 0){
            product.deliveryDate = catalogSelected.deliveryDate;
            product.applyServiceTax = catalogSelected.taxService;
            productsSelected.push(product);
        }
    }else{
        if(product.length != 0){
            if(!product.tenLastProduct){
                product.catalogId = catalogSelected.id;
                product.catalogTypeId = catalogSelected.catalogTypeId;
            }
            product.deliveryDate = catalogSelected.deliveryDate;
            product.applyServiceTax = catalogSelected.taxService;
            productsSelected.push(product);
        }
    }


    sessionStorage.removeItem('newGiftcardValues');
    sessionStorage.removeItem("giftCardsSaved");

    var subtotal = 0,
        tempBenefitsOrder = [],
        subsidyRestrictions = [],
        realBenefits = [],
        benefits = {
            "subsidies": [],
            "asignations": [],
            "diariesAsignations": [],
            "creditsLimits": [],
            "manyCash": [],
            "ARS": []
        };


    for (var i = 0; i < productsSelected.length; i++){
        var userSelectedBenefitsByCatalogsType = JSON.parse(sessionStorage.getItem('userSelectedBenefitsByCatalogsType')) || [];
        var split = [],
            index = 1,
            failure = false,
            sharedPrice = productsSelected[i].price * productsSelected[i].quantity,
            totalTax = 0,
            totalServiceTax = 0,
            newBenefits = [],
            subsidyRestriction = [],
            generalAmountToDiscount = 0,
            userSelectedBenefitsByCatalogsTypeINDEX = 0;

        //Determina que beneficios debe usar el producto actual.
        var finishLoop = false;
        for(var k = 0; k < userSelectedBenefitsByCatalogsType.length; k++){
            if(userSelectedBenefitsByCatalogsType[k].catalogTypeId == productsSelected[i].catalogTypeId){
                if(finishLoop == false){
                    if(userSelectedBenefitsByCatalogsType[k].deliveryDate == productsSelected[i].deliveryDate){
                        tempBenefitsOrder = userSelectedBenefitsByCatalogsType[k];
                        userSelectedBenefitsByCatalogsTypeINDEX = k;
                        finishLoop = true;
                    }
                }else{
                    k = userSelectedBenefitsByCatalogsType.length + 1;
                }
            }
        }

        ////Alimenta la variable 'subsidyRestrictions' y le da formato al subsidio.
        var extractSubsidy = [];
        var subsidyIndex = 0;
        for(var h = 0; h < tempBenefitsOrder.benefitsOrder.length; h++){
            switch (tempBenefitsOrder.benefitsOrder[h].benefitType){
                case "subsidio":
                    var canBePushed = true;
                    if(subsidyRestrictions.length != 0){
                        for(var x = 0;  x < subsidyRestrictions.length; x++){
                            if(subsidyRestrictions[x].deliveryDate == productsSelected[i].deliveryDate){
                                subsidyRestriction = subsidyRestrictions[x];
                                canBePushed = false;
                                x = subsidyRestrictions.length + 1;
                            }
                        }
                    }

                    if(canBePushed){
                        subsidyRestriction = {
                            "id": tempBenefitsOrder.benefitsOrder[h].id,
                            "dayAplicationIndicator": tempBenefitsOrder.benefitsOrder[h].dayAplicationIndicator,
                            "dayAplication": tempBenefitsOrder.benefitsOrder[h].dayAplication,
                            "restriction": tempBenefitsOrder.benefitsOrder[h].restriction,
                            "deliveryDate": productsSelected[i].deliveryDate,
                            "catalogsTypes": []
                        };

                        subsidyRestrictions.push(subsidyRestriction);
                    }

                    for(var w = 0; w < tempBenefitsOrder.benefitsOrder[h].subsidyDetail.length; w++){
                        tempBenefitsOrder.benefitsOrder[h].subsidyDetail[w].benefitType = tempBenefitsOrder.benefitsOrder[h].benefitType;
                        tempBenefitsOrder.benefitsOrder[h].subsidyDetail[w].catalogTypeId = tempBenefitsOrder.catalogTypeId;
                        tempBenefitsOrder.benefitsOrder[h].subsidyDetail[w].order = tempBenefitsOrder.benefitsOrder[h].order;
                        tempBenefitsOrder.benefitsOrder[h].subsidyDetail[w].type = tempBenefitsOrder.benefitsOrder[h].type;
                        tempBenefitsOrder.benefitsOrder[h].subsidyDetail[w].productTypes = tempBenefitsOrder.benefitsOrder[h].productTypes;
                        tempBenefitsOrder.benefitsOrder[h].subsidyDetail[w].deliveryDate = tempBenefitsOrder.deliveryDate;
                        tempBenefitsOrder.benefitsOrder[h].subsidyDetail[w].taxValues = tempBenefitsOrder.benefitsOrder[h].taxValues;
                    }
                    extractSubsidy = tempBenefitsOrder.benefitsOrder[h].subsidyDetail;
                    subsidyIndex = h;
                    break;
                case "asignacion":
                    tempBenefitsOrder.benefitsOrder[h].deliveryDate = tempBenefitsOrder.deliveryDate;
                    tempBenefitsOrder.benefitsOrder[h].discountDate = tempBenefitsOrder.discountDate;
                    break;
                case "asignacionDiaria":
                    tempBenefitsOrder.benefitsOrder[h].deliveryDate = tempBenefitsOrder.deliveryDate;
                    break;
                case "limiteDeCredito":
                    var type = (tempBenefitsOrder.creditLimitIsDaily) ? 'LMD' : 'LMG';
                    tempBenefitsOrder.benefitsOrder[h].type = type;
                    tempBenefitsOrder.benefitsOrder[h].deliveryDate = tempBenefitsOrder.deliveryDate;
                    tempBenefitsOrder.benefitsOrder[h].creditLimitIsDaily = tempBenefitsOrder.creditLimitIsDaily;
                    tempBenefitsOrder.benefitsOrder[h].discountDate = tempBenefitsOrder.discountDate;
                    break;
            }
        }

        if(extractSubsidy.length != 0){
            tempBenefitsOrder.benefitsOrder.splice(subsidyIndex, 1);
            for(var z = 0; z < extractSubsidy.length; z++){
                tempBenefitsOrder.benefitsOrder.unshift(extractSubsidy[z]);
            }
        }

        realBenefits = tempBenefitsOrder;

        if(productsSelected[i].categoryname == "tipo monto"){
            split.push({"id": "18.00", "benefitType": "taxes", "name": "Impuesto Tipo Monto", "amountToDiscount": productsSelected[i].itbisPriceMarket.replace(',', '')});
            sharedPrice = parseFloat(sharedPrice) + parseFloat(productsSelected[i].itbisPriceMarket);
        }else{
            for (var a = 0; a < productsSelected[i].taxTypes.length; a++){
                var taxAmount  = ( productsSelected[i].taxTypes[a] / 100) * productsSelected[i].price  * productsSelected[i].quantity;
                sharedPrice = sharedPrice + taxAmount;
                totalTax = totalTax + taxAmount;
                split.push({"benefitType": "taxes", "id": productsSelected[i].taxTypes[a], "name": sessionStorage.getItem('taxName') +" (" + (productsSelected[i].taxTypes[a] * 1) + "%)", "amountToDiscount": totalTax});
            };
        }


        if(productsSelected[i].applyServiceTax == true){
            var applyServiceTax = 0.1 * productsSelected[i].price * productsSelected[i].quantity;
            sharedPrice = sharedPrice + applyServiceTax;
            totalServiceTax = totalServiceTax + applyServiceTax;
            split.push({"id": "tax10", "benefitType": "tax10", "name": "10% Servicio ", "amountToDiscount": totalServiceTax});

            generalAmountToDiscount = generalAmountToDiscount + totalServiceTax;
        };

        if(userSelectedBenefitsByCatalogsType[userSelectedBenefitsByCatalogsTypeINDEX].giftCards.length > 0){
            realBenefits.benefitsOrder = addGiftCardBenefit(userSelectedBenefitsByCatalogsType[userSelectedBenefitsByCatalogsTypeINDEX].applyAfterSubsidy, realBenefits.benefitsOrder);
        }

        var benefitsOrder = verifyDoubleBenefit(realBenefits.benefitsOrder);

        userSelectedBenefits.benefitsOrder = benefitsOrder;

        var remainder = sharedPrice;
        priceRangeApplied = false;
        for (var e = 0; e < realBenefits.benefitsOrder.length; e++){
            var benefitToApply = getBenefitToApply(e+1 , realBenefits.benefitsOrder, productsSelected[i]);
            switch(benefitToApply.benefitType) {
                case "tarjetaDeRegalo":  // Tarjeta de Regalo


                    if(sharedPrice != 0 && benefitToApply.order == index){

                        var apply = false;
                        if(getPaymentMethodSelected() == "paysheet" && getAccountTypeSelected() == "paysheetAccount"){
                            apply = true;
                        }else {
                            if (getPaymentMethodSelected() != "paysheet" && getAccountTypeSelected() == "paysheetAccount"){
                                if(companyAndBranchSelected.applicableBenefits.useGiftCardPosCash == true){
                                    apply = true;
                                }
                            }
                        }

                        if(apply){
                            var results = giftCard(userSelectedBenefitsByCatalogsType[userSelectedBenefitsByCatalogsTypeINDEX], sharedPrice, benefitToApply.order );

                            for (var h = 0; h < results.length; h++){
                                split.push(results[h]);
                                sharedPrice = results[h].price;
                            }
                        }

                        index++;
                        break;
                    }
                case "subsidio":  // Subsidio

                    if(sharedPrice != 0  && benefitToApply.order == index){
                        var apply = false;
                        if(getPaymentMethodSelected() == "paysheet" && getAccountTypeSelected() == "paysheetAccount"){
                            apply = true;
                        }else {
                            if (getPaymentMethodSelected() != "paysheet" && getAccountTypeSelected() == "paysheetAccount"){
                                if(companyAndBranchSelected.applicableBenefits.useSubsidyPosCash == true){
                                    apply = true;
                                }
                            }
                        }

                        if(apply){
                            subsidy(i, index, benefitToApply, benefits, sharedPrice, productsSelected[i], subsidyRestriction, function (results) {
                                if(results != false){
                                    for(var z = 0; z < subsidyRestrictions.length; z++){
                                        if(subsidyRestrictions[z].deliveryDate == results.deliveryDate){
                                            subsidyRestrictions[z].dayAplication = results.dayAplication;
                                            subsidyRestrictions[z].catalogsTypes.push(results.catalogTypeId);
                                        }
                                    }

                                    newBenefits.push(results);
                                    split.push(results);
                                    sharedPrice = results.price;
                                }
                            });
                        }
                        index++;
                        break;
                    }
                case "asignacionDiaria":  // Asignación Diaria

                    if(sharedPrice != 0 && benefitToApply.order == index){
                        var apply = false;
                        if(getPaymentMethodSelected() == "paysheet" && getAccountTypeSelected() == "paysheetAccount"){
                            apply = true;
                        }else {
                            if (getPaymentMethodSelected() != "paysheet" && getAccountTypeSelected() == "paysheetAccount"){
                                if(companyAndBranchSelected.applicableBenefits.useDailyAssignationPosCash == true){
                                    apply = true;
                                }
                            }
                        }

                        if(apply){
                            diaryAsignation(i, index, benefitToApply, benefits, sharedPrice, productsSelected[i], function (results) {
                                if(results != false){
                                    newBenefits.push(results);
                                    split.push(results);
                                    sharedPrice = results.price;
                                }
                            });
                        }
                        index++;
                        break;
                    }
                case "asignacion":  //  Asignación

                    if(sharedPrice != 0 && benefitToApply.order == index) {
                        var apply = false;
                        if(getPaymentMethodSelected() == "paysheet" && getAccountTypeSelected() == "paysheetAccount"){
                            apply = true;
                        }else {
                            if (getPaymentMethodSelected() != "paysheet" && getAccountTypeSelected() == "paysheetAccount"){
                                if(companyAndBranchSelected.applicableBenefits.useAssignationPosCash == true){
                                    apply = true;
                                }
                            }
                        }

                        if(apply) {
                            asignation(i, index, benefitToApply, benefits, sharedPrice, productsSelected[i], userSelectedBenefits, function (results) {
                                if (results != false) {
                                    newBenefits.push(results);
                                    split.push(results);
                                    sharedPrice = results.price;
                                }
                            });
                        }
                        index++;
                        break;
                    }
                case "limiteDeCredito":
                    if(sharedPrice != 0 && benefitToApply.order == index) {
                        var apply = false;
                        if((getPaymentMethodSelected() == "paysheet" && getAccountTypeSelected() == "paysheetAccount") ||
                            (getPaymentMethodSelected() == "paysheet" && getAccountTypeSelected() == "enterpriseAccount")){
                            apply = true;
                        }

                        if (apply) {
                            creditLimit(i, index, benefitToApply, benefits, sharedPrice, productsSelected[i], realBenefits, function (results) {
                                if (results != false) {

                                    newBenefits.push(results);
                                    split.push(results);
                                    sharedPrice = results.price;

                                    //if(isDeliveryDateToDate()){
                                    //    callback(false)
                                    //}

                                    //if(newBenefits.length > 0){
                                    //    var benef = newBenefits;
                                    //}else{
                                    //    var benef = [];
                                    //}
                                    //
                                    //for (var u = 0; u < benef.length; u++) {
                                    //    if (benef[u].benefitType == "limiteDeCredito") {
                                    //        benef.splice(u, 1);
                                    //    }
                                    //}
                                    //benef.push(results);
                                    //newBenefits = benef;
                                    //split.push(results);
                                    //sharedPrice = results.value;
                                    //}else{
                                    //    if(i < productSelected.length - 1){
                                    //        productsToCashFlow.push(product);
                                    //    }else{
                                    //        sessionStorage.setItem('productsToCashFlow', JSON.stringify(productsToCashFlow));
                                    //        callback(false);
                                    //        failure = true;
                                    //        return false;
                                    //    }
                                }else{
                                    callback(false);
                                    failure = true;
                                    return false;
                                }
                            });
                        }
                        index++;
                        break;
                    }

                case "ARS":
                    if(sharedPrice != 0 && benefitToApply.order == index){
                        var apply = false;
                        if(getIfArsIsAvaliable() == true){
                            apply = true;
                        }

                        if(apply){
                            ars(i, index, benefitToApply, benefits, sharedPrice, productsSelected[i], realBenefits, function(results){
                                if(results != false){
                                    newBenefits.push(results);
                                    split.push(results);
                                    sharedPrice = results.price;
                                }
                            });
                        }

                        index++;
                        break;
                    }

                    break;
                default:  // Efectivo
                    if(sharedPrice != 0 && benefitToApply.order == index){
                        var companyAndBranchSelected = JSON.parse(sessionStorage.getItem('companyAndBranchSelected')) || [];
                        if(companyAndBranchSelected.vendor.cash == true || companyAndBranchSelected.vendor.acceptCard == true){
                            var apply = false;
                            if(getAccountTypeSelected() == "paysheetAccount"){
                                apply = true;
                            }

                            if(apply){
                                cash(i, index, benefitToApply, benefits, sharedPrice, productsSelected[i], realBenefits, function(results){
                                    if(results != false){

                                        //if(isDeliveryDateToDate()){
                                        //    callback(false)
                                        //}

                                        if(newBenefits.length > 0){
                                            var benef = newBenefits;
                                        }else{
                                            var benef = [];
                                        }

                                        for (var u = 0; u < benef.length; u++) {
                                            if (benef[u].benefitType == "cash") {
                                                benef.splice(u, 1);
                                            }
                                        }

                                        benef.push(results);
                                        newBenefits = benef;
                                        split.push(results);
                                        sharedPrice = results.value;
                                        //}else{
                                        //    if(i < productSelected.length - 1){
                                        //        productsToCashFlow.push(product);
                                        //    }else{
                                        //        sessionStorage.setItem('productsToCashFlow', JSON.stringify(productsToCashFlow));
                                        //        callback(false);
                                        //        failure = true;
                                        //        return false;
                                        //    }
                                    }
                                });
                            }
                        }

                        index++;
                        break;
                    }

            }
        };

        if(failure != true){
            productsSelected[i].discountedAmount = remainder - sharedPrice;
            productsSelected[i].benefitsApplied = split;
            productsSelected[i].index = i;
        }
    };
    if(failure != true){
        sessionStorage.setItem('productsSelected', JSON.stringify(productsSelected));
        if(callback){
            callback(true);
        }
    }
}

function getIfArsIsAvaliable(){
    var isPharmacy = JSON.parse(sessionStorage.getItem('isPharmacy'));
    var companyAndBranchSelected = JSON.parse(sessionStorage.getItem('companyAndBranchSelected'));
    if(isPharmacy == true && (companyAndBranchSelected.company.showInsurance == true || companyAndBranchSelected.company.showInsurance == "true")){
        return true;
    }

    return false;
}

function subsidy(i, index, benefitToApply, benefits, sharedPrice, productsSelected, subsidyRestriction,  callback){
    var whBenefitToApply = false;
    var benefit = [];
    var finishLoop = false;

    if(benefits.subsidies.length != 0){
        for (var a = 0; a < benefits.subsidies.length; a++) {
            if(finishLoop == false){
                if (benefits.subsidies[a].deliveryDate == productsSelected.deliveryDate) {
                    if(benefits.subsidies[a].subsidyDetailId == benefitToApply.subsidyDetailId){
                        benefit = benefits.subsidies[a];
                        whBenefitToApply = true;
                        finishLoop = true;
                    }
                }
            }else{
                a = benefits.length + 1;
            }
        }
    }

    if (benefit.benefitType == "subsidio" && i != 0) {
        var dataToUse = (whBenefitToApply == true) ? benefit : benefitToApply;
    }else{
        var dataToUse = benefitToApply;
    }

    var results = calculateSubsidy(dataToUse, productsSelected, sharedPrice, index, subsidyRestriction);

    if(results != false){
        if(whBenefitToApply == false){
            benefits.subsidies.push(results);
        }else{
            for(var s = 0; s < benefits.subsidies.length; s++){
                if(benefits.subsidies[s].subsidyDetailId == benefitToApply.subsidyDetailId && benefits.subsidies[s].deliveryDate == benefitToApply.deliveryDate){
                    benefits.subsidies[s] = results;
                    s = benefits.subsidies.length + 1;
                }
            }
        }
    }

    if(callback){
        callback(results);
    }
}

var priceRangeApplied;
var productsPriceRangeApplied = false;
function calculateSubsidy(data, product, productPrice, index, subsidyRestriction){

    var serviceTaxApplyAfter = false;
    var amountRemaining = null;
    var taxesBack = false;

    if(productPrice == null){
        productPrice = product.price;
    }

    if(subsidyRestriction.dayAplication != undefined || subsidyRestriction.dayAplication != null){
        data.dayAplication = subsidyRestriction.dayAplication;
    }

    if(subsidyRestriction.restriction == true){
        if(subsidyRestriction.catalogsTypes.length != 0){
            var catalogsTypesIndex = jQuery.inArray(product.catalogTypeId, subsidyRestriction.catalogsTypes);
            if(catalogsTypesIndex != -1){
                return false;
            }
        }

        var tempProductoQuantity = product.quantity;
        product.quantity = 1;
    }

    var quantity = product.quantity;

    if(product.taxTypes.length != 0){
        for (var a = 0; a < product.taxTypes.length; a++){
            var taxAmount  = (product.taxTypes[a] / 100) * product.price;
        }
    }else{
        var taxAmount = 0;
    }

    if(product.applyServiceTax == true){
        var applyServiceTax = 0.1 * product.price;
    }else{
        var applyServiceTax = 0;
    }

    // Day Application
    if(subsidyRestriction.dayAplicationIndicator == "true"){
        if(product.quantity > 1){
            if(product.applyServiceTax == true){
                var quantityXday = Math.ceil( productPrice / (parseFloat(product.price) + taxAmount + applyServiceTax));
            }else{
                var quantityXday = Math.ceil( productPrice / (parseFloat(product.price) + taxAmount));
            }
            if(quantityXday >= parseFloat(data.dayAplication)){
                if(parseFloat(product.quantity) < parseFloat(data.dayAplication)){
                    quantity = parseInt(product.quantity);
                }else{
                    quantity = parseInt(data.dayAplication);
                    var dayAplicationLimit = true;
                }

                var valueDayApplication = 0;
            }else{
                var valueDayApplication = data.dayAplication - quantity;
            }
        }else{
            var valueDayApplication = data.dayAplication - quantity;
        }

    }

    var amountToDiscount = 0;

    if(data.amount < 0){
        data.amount = 0;
    }

    if(data.value == undefined){var subsidyAmount = parseFloat(data.amount)}else{var subsidyAmount = data.value};


    if((subsidyAmount <= 0 &&  parseInt(data.type) != 5 &&  parseInt(data.type) != 6 && parseInt(data.type) != 1 &&
        parseInt(data.type) != 2 && parseInt(data.type) != 3) || data.dayAplication <= 0 || priceRangeApplied == true){
        return false;
    }

    if(data.limitPerDayIndicator == "true"){
        if(parseFloat(data.limitPerDay) <= 0){
            return false;
        }else{
            if(data.type == 5){
                var quantityLimitPerDay = data.limitPerDay / taxAmount;
                quantityLimitPerDay = parseInt(quantityLimitPerDay);

                if(quantityLimitPerDay < 1){
                    return false;
                }

                if(quantity > quantityLimitPerDay){
                    quantity = quantityLimitPerDay;
                }
            }
        }
    }

    if(subsidyRestriction.restriction == true){
        taxAmount = taxAmount * quantity;
        applyServiceTax = applyServiceTax * quantity;
        var tempPriceProduct = (product.price * quantity) + taxAmount + applyServiceTax;

        if(productPrice >= tempPriceProduct){
            productPrice = tempPriceProduct;
        }
    }

    switch(parseInt(data.type)) {
        case 1: //Porcentaje

            var tempPriceProduct = 0;
            if(dayAplicationLimit){
                tempPriceProduct = (parseFloat(product.price) + taxAmount + applyServiceTax) * quantity;
            }else{
                tempPriceProduct = productPrice;
            }

            subsidyAmount = (data.percentage / 100) * tempPriceProduct;

            var validation = validations(data, product, tempPriceProduct);
            if( validation == false){ return false; }

            break;

        case 2: //Monto
            var tempPriceProduct = 0;
            if(dayAplicationLimit){
                tempPriceProduct = (parseFloat(product.price) + taxAmount + applyServiceTax) * quantity;
                amountRemaining = productPrice - tempPriceProduct;
                productPrice = tempPriceProduct;
            }else{
                tempPriceProduct = productPrice;
            }

            var validation = validations(data, product, tempPriceProduct);
            if( validation == false){  return false; }

            break;

        case 3: //Combinado
            var tempPriceProduct = 0;
            if(dayAplicationLimit){
                if(typeof product.price == "string"){
                    product.price = parseFloat(product.price);
                }
                tempPriceProduct = (product.price + taxAmount + applyServiceTax) * quantity;
            }else{
                tempPriceProduct = productPrice;
            }

            var percentageAmount = (data.percentage / 100) * tempPriceProduct;

            var validation = validations(data, product, tempPriceProduct);
            if( validation == false){  return false; }

            break;

        case 4: //Sin Subsidio

            return false;

            break;

        case 5: //ITBIS


            if(productPrice < taxAmount){
                return false;
            }

            var validation = validations(data, product, productPrice);
            if( validation == false){ return false; }

            subsidyAmount =  (product.taxTypes / 100) * product.price * quantity;

            break;

        case 6: //Subtotal + ITBIS

            serviceTaxApplyAfter = true;
            productPrice = productPrice - applyServiceTax;

            var dontApplyITBIS = !validate_taxes(data.taxValues, product.taxTypes);
            var tempPriceProduct = (parseFloat(product.price) + taxAmount) * quantity;
            if(dayAplicationLimit || tempPriceProduct < productPrice){
                amountRemaining = productPrice - tempPriceProduct;
                productPrice = tempPriceProduct;
            }else{
                tempPriceProduct = productPrice;
            }

            var validation = validations(data, product, tempPriceProduct, dontApplyITBIS);
            if( validation == false){ return false; }

            if(dontApplyITBIS == false){
                var ITBIS_Amount =  (product.taxTypes / 100) * product.price * quantity;
                if(productPrice < ITBIS_Amount){
                    return false;
                }
            }else{
                var ITBIS_Amount =  0;
                productPrice = productPrice - taxAmount;
                taxesBack = true;
            }


            if(parseFloat(data.amount) > 0){
                subsidyAmount = subsidyAmount + ITBIS_Amount;
            }else if(parseFloat(data.percentage) > 0){
                subsidyAmount = ((data.percentage / 100) * product.price) + ITBIS_Amount;
            }else{
                if(dontApplyITBIS == false){
                    subsidyAmount = ITBIS_Amount;
                }else{
                    return false;
                }
            }

            break;
    }


    if(data.limitPerDayIndicator == "true"){
        if(subsidyAmount > data.limitPerDay){
            subsidyAmount = parseFloat(data.limitPerDay);
            data.limitPerDay = 0;
        }
    }


    if(data.type == 3){ //Combinado
        //montoSubsidio = parseFloat(data.amount);
        if(percentageAmount >= parseFloat(subsidyAmount)){
            productPrice = productPrice - subsidyAmount;
            amountToDiscount = subsidyAmount;
            subsidyAmount = 0;
        }else{
            subsidyAmount = subsidyAmount - percentageAmount;
            amountToDiscount = percentageAmount;
            productPrice = productPrice - percentageAmount;
        }
    }else{
        if(parseFloat(productPrice) >= parseFloat(subsidyAmount)){

            productPrice = productPrice - subsidyAmount;
            amountToDiscount = subsidyAmount;
            subsidyAmount = 0;

            if(data.limitPerDayIndicator != "false"){
                var limitPerDay = parseFloat(data.limitPerDay) - amountToDiscount;
            }

        }
        else {
            subsidyAmount = subsidyAmount - productPrice;
            amountToDiscount = productPrice;
            productPrice = 0;

            if(data.limitPerDayIndicator != "false"){
                var limitPerDay = parseFloat(data.limitPerDay) - amountToDiscount;
            }

        }
    }

    data.index = index;
    data.quantityApplied = valueDayApplication;
    if(percentageAmount){
        var amountAcumulated = 0;
        if(data.amountAcumulated == undefined){
            amountAcumulated = subsidyAmount;
        }else{
            amountAcumulated = data.amountAcumulated;
            amountAcumulated = amountAcumulated + subsidyAmount;
        }

        data.amountAcumulated = amountAcumulated;
    }

    if(subsidyRestriction.restriction  == true){
        product.quantity = tempProductoQuantity;
    }

    if(amountRemaining != null){
        productPrice = productPrice + amountRemaining;
    }

    if(serviceTaxApplyAfter){
        productPrice = productPrice + applyServiceTax;
    }

    if(taxesBack){
        productPrice = productPrice + taxAmount;
    }

    return {benefitType: "subsidio", type: data.type, "subsidyDetailId": data.subsidyDetailId, "name": "Subsidio",
        "amount": data.amount, "businessType": data.businessType, "value": subsidyAmount, "percentage": data.percentage,
        "dayAplication":  valueDayApplication, "dayAplicationIndicator": data.dayAplicationIndicator, "productTypes": data.productTypes,
        "limitPerDay": limitPerDay, "limitPerDayIndicator": data.limitPerDayIndicator, "taxValues": data.taxValues, "restriction": data.restriction, "catalogTypeId": data.catalogTypeId,
        "amountToDiscount": amountToDiscount, "price": productPrice, "amountAcumulated": amountAcumulated, "order": data.order,
        "productPriceRange": data.productPriceRange, "productPriceRangeIndicator": data.productPriceRangeIndicator, "deliveryDate": product.deliveryDate};
}

function validations(data, product, productPrice, dontApplyITBIS){

    //Validar Aplicación Por Dia
    if(data.dayAplicationIndicator == "true"){
        if(data.dayAplication <= 0){ return false; };
    }


    //// Validar Tipo de Producto
    if(!validate_ProductTypes(data.productTypes, product)){ return false; }
    //
    //
    //// Rango de Precio por Producto
    if(data.productPriceRangeIndicator == "true"){

        var montoImpuesto  = ( product.taxTypes / 100) * product.price,
            applyServiceTax = 0;

        if(product.applyServiceTax == true){
            applyServiceTax = 0.1 * product.price;
        }
        var subTotal = parseFloat(product.price) + montoImpuesto + applyServiceTax;
        if ( subTotal < JSON.parse(data.productPriceRange)[0] || subTotal > JSON.parse(data.productPriceRange)[1]) {
            return false;
        }else{
            priceRangeApplied = true;
        }
    }else{
        productsPriceRangeApplied = validatePriceRange(product, productPrice, data);
        if(productsPriceRangeApplied){
            return false;
        }
    }

    //

    if(data.taxValues && data.type != 6){
        if(!validate_taxes(data.taxValues, product.taxTypes)){
            return false;
        }
    }


    // Validar Restricción
    if(!validate_CatalogType(data, product)){ return false; }

    return true;
}

function validate_ProductTypes(data, product){
    var status = false;
    for (var i = 0; i < data.length; i++){

        if(data[i] == "combos" && (product.combo == true || product.combo == "true")){

            status = true;
        }
        if(data[i] == "adicionales" && (product.combo == false || product.combo == "false")){
            status = true;
        }
        if(data[i] == "unico" && (product.combo == false || product.combo == "false")){
            status = true;
        }
    }
    return status;
}

function validate_CatalogType(data, product){
    var status = true;
    var retrictionApplied = JSON.parse(sessionStorage.getItem("retrictionApplied") || '[]');
    if(data.restriction == true){
        if(retrictionApplied.length != 0){
            for (var i = 0; i < retrictionApplied.length; i++){
                if(retrictionApplied[i].id == product.catalogTypeId){
                    status = false;
                }
            }
        }
        if(status == true){
            retrictionApplied.push({"id": product.catalogTypeId});
            sessionStorage.setItem('retrictionApplied', JSON.stringify(retrictionApplied));
        }
    }else{
        //status = false;
        //for (var i = 0; i < data.catalogTypeIdGroup.length; i++){
        //    if(data.catalogTypeIdGroup[i] == product.catalogTypeId){
        //        status = true;
        //    }
        //}
    }
    return status;
}

function validate_taxes(data, product){
    var status = false;
    if(product == 0){
        status = true;
    }else{
        for (var i = 0; i < data.length; i++){
            if(data[i] == product){
                status = true;
            }
        }
    }
    return status;
}

function validate_businessType(data, product){
    var status = false;
    for (var i = 0; i < data.length; i++){
        if(data[i] == product){
            status = true;
        }
    }
    return status;
}

function validatePriceRange(product, productPrice){
    var benefits = [];
    var userSelectedBenefitsByCatalogsType = JSON.parse(sessionStorage.getItem('userSelectedBenefitsByCatalogsType'));

    var data = [];
    var finishLoop = false;
    for(var n = 0; n < userSelectedBenefitsByCatalogsType.length; n++){
        if(userSelectedBenefitsByCatalogsType[n].catalogTypeId == product.catalogTypeId){
            if(finishLoop == false){
                for(var dt = 0; dt < userSelectedBenefitsByCatalogsType[n].deliveryTypes.length; dt++){
                    if(userSelectedBenefitsByCatalogsType[n].deliveryTypes[dt].deliveryDate = product.deliveryDate){
                        data.push({"benefitsOrder": userSelectedBenefitsByCatalogsType[n].benefitsOrder});
                        finishLoop = true;
                    }
                }
            }else{
                k = userSelectedBenefitsByCatalogsType.length + 1;
            }
        }
    }

    benefits = data;

    var rightBenefit = [];

    for(var i = 0; i < benefits.length; i++){
        if(benefits[i].id == product.userID || benefits[i].userid == product.userID){
            rightBenefit.push(benefits[i]);
            i = benefits.length + 1;
        }
    }

    var issetPriceRangeBenefits = [];
    for(var n = 0; n < rightBenefit[0].benefitsOrder.length; n++){
        if(rightBenefit[0].benefitsOrder[n].benefitType == "subsidio"){
            if(rightBenefit[0].benefitsOrder[n].productPriceRangeIndicator == "true"){
                issetPriceRangeBenefits.push(rightBenefit[0].benefitsOrder[n]);
            }
        }
    }

    if(issetPriceRangeBenefits.length != 0){
        var isInRange = true;
        for(var k = 0; k < issetPriceRangeBenefits.length; k++){
            if( productPrice < JSON.parse(issetPriceRangeBenefits[k].productPriceRange)[0] || productPrice > JSON.parse(issetPriceRangeBenefits[k].productPriceRange)[1]){
                isInRange = false;
            }
        }
    }

    if(isInRange){
        return true;
    }

    return false;
}

function diaryAsignation(i, index, benefitToApply, benefits, sharedPrice, productsSelected, callback){
    var whBenefitToApply = false;
    var benefit = [];
    var finishLoop = false;

    if(benefits.diariesAsignations.length != 0){
        for (var a = 0; a < benefits.diariesAsignations.length; a++) {
            if(finishLoop == false){
                if (benefits.diariesAsignations[a].deliveryDate == productsSelected.deliveryDate && benefits.diariesAsignations[a].id == benefitToApply.id) {
                    benefit = benefits.diariesAsignations[a];
                    whBenefitToApply = true;
                    finishLoop = true;
                }
            }else{
                a = benefits.length + 1;
            }
        }
    }

    if (benefit.benefitType == "asignacionDiaria" && i != 0) {
        var dataToUse = (whBenefitToApply) ? benefit : benefitToApply;
    } else {

        var dataToUse = benefitToApply;
    }

    var results = calculateDiaryAsignation(dataToUse, productsSelected, sharedPrice, i);

    if(results != false){
        if(whBenefitToApply == false){
            benefits.diariesAsignations.push(results);
        }else{
            for(var s = 0; s < benefits.diariesAsignations.length; s++){
                if(benefits.diariesAsignations[s].id == benefitToApply.id && benefits.diariesAsignations[s].deliveryDate == benefitToApply.deliveryDate){
                    benefits.diariesAsignations[s] = results;
                    s = benefits.diariesAsignations.length + 1;
                }
            }
        }
    }


    if(callback){
        callback(results);
    }

}

function calculateDiaryAsignation(data, product, productPrice, i){
    var today = new Date();

    if(productPrice == null){
        productPrice = product.price * product.quantity;
    }

    var amountToDiscount = 0;
    if(data.value == undefined){var diaryAsignationAmount = data.amount}else{var diaryAsignationAmount = data.value};

    if(parseFloat(productPrice) > diaryAsignationAmount){
        productPrice = productPrice - diaryAsignationAmount;
        amountToDiscount = diaryAsignationAmount;
        diaryAsignationAmount = 0;
    }else{
        diaryAsignationAmount = diaryAsignationAmount - productPrice;
        amountToDiscount = productPrice;
        productPrice = 0;
    }

    data.index = i;
    var limitReached = checkIfHasLimitAmount(data, diaryAsignationAmount);

    if(limitReached){
        return false;
    }

    return {"benefitType": "asignacionDiaria", "id": data.id, "amount": data.amount, "name": "Asignación Diaria", "order": data.order,
        "value": diaryAsignationAmount, "amountToDiscount": amountToDiscount, "price": productPrice, "catalogTypeId": data.catalogTypeId, "deliveryDate": product.deliveryDate};
}

function asignation(i, index, benefitToApply, benefits, sharedPrice, productsSelected, userSelectedBenefits, callback) {
    var whBenefitToApply = false;
    var benefit = [];

    if(benefits.asignations.length != 0){
        for(var a = 0; a < benefits.asignations.length; a++){
            if(benefits.asignations[a].id == benefitToApply.id){
                benefit = benefits.asignations[a];
                whBenefitToApply = true;
                a = benefits.asignations.length + 1;
            }
        }
    }

    if (benefit.benefitType == "asignacion" && i != 0) {
        var dataToUse = (whBenefitToApply == true) ? benefit : benefitToApply;
    } else {
        var dataToUse = benefitToApply;
    }

    var results = calculateAsignation(dataToUse, productsSelected, sharedPrice, i);

    if(results != false){
        if(whBenefitToApply == false){
            benefits.asignations.push(results);
        }else{
            for(var s = 0; s < benefits.asignations.length; s++){
                if(benefits.asignations[s].id == benefitToApply.id){
                    benefits.asignations[s] = results;
                    s = benefits.asignations.length + 1;
                }
            }
        }
    }

    if(callback){
        callback(results);
    }
}

function calculateAsignation(data, product, productPrice, i){

    if(productPrice == null){
        productPrice = product.price * product.quantity;
    }

    var amountToDiscount = 0;
    if(data.value == undefined){var asignationAmount = data.amount}else{var asignationAmount = data.value};


    if(parseFloat(productPrice) > asignationAmount){
        productPrice = productPrice - asignationAmount;
        amountToDiscount = asignationAmount;
        asignationAmount = 0;
        //data.amountReached = true;
    }
    else {
        asignationAmount = asignationAmount - productPrice;
        amountToDiscount = productPrice;
        productPrice = 0;
        //data.amountReached = false;
    }

    data.index = i;

    var limitReached = checkIfHasLimitAmount(data, asignationAmount);
    if(limitReached){
        return false;
    }


    return {"benefitType": "asignacion", "id": data.id, "name": "Asignación", "amount": data.amount, "value": asignationAmount, "order": data.order,
        "amountToDiscount": amountToDiscount, "price": productPrice, "businessType": data.businessType, "catalogTypeId": data.catalogTypeId, "deliveryDate": product.deliveryDate};


}

function creditLimit(i, index, benefitToApply, benefits, sharedPrice, productsSelected, userSelectedBenefits, callback) {
    var benefit = [];
    var isCutOffDate = false;
    var whBenefitToApply = false;

    if(productsSelected.deliveryDate.toFormatDate() > userSelectedBenefits.discountDate.toFormatDate()){
        isCutOffDate = true;
        benefitToApply.id = "0x0";
    }

    if(benefits.creditsLimits.length != 0){
        for(var a = 0; a < benefits.creditsLimits.length; a++){
            if(userSelectedBenefits.creditLimitIsDaily){
                if(benefits.creditsLimits[a].deliveryDate == productsSelected.deliveryDate && benefits.creditsLimits[a].type == "LMD"){
                    benefit = benefits.creditsLimits[a];
                    whBenefitToApply = true;
                }

            }else{
                if(isCutOffDate){
                    for(var g = 0; g < benefits.creditsLimits.length; g++){
                        if(benefits.creditsLimits[g].isCutOffDate == true){
                            benefit = benefits.creditsLimits[g];
                            whBenefitToApply = true;
                            g = benefits.creditsLimits.length+ 1;
                        }
                    }

                    a = benefits.length + 1;
                }else{
                    for(var g = 0; g < benefits.creditsLimits.length; g++){
                        if(benefits.creditsLimits[g].deliveryDate.toFormatDate() <= userSelectedBenefits.discountDate.toFormatDate() &&
                            benefits.creditsLimits[g].type == "LMG" && benefits.creditsLimits[g].id == benefitToApply.id){
                            benefit = benefits.creditsLimits[g];
                            whBenefitToApply = true;
                            g = benefits.creditsLimits.length + 1;
                        }
                    }

                    a = benefits.creditsLimits.length + 1;
                }
            }
        }
    }


    if (benefit.benefitType == "limiteDeCredito" && i != 0) {
        var dataToUse = (whBenefitToApply) ? benefit : benefitToApply;
    } else {
        var dataToUse = benefitToApply;
    }

    var results = calculateCreditLimit(dataToUse, productsSelected, sharedPrice, isCutOffDate);

    if(results != false){
        if(whBenefitToApply == false){
            benefits.creditsLimits.push(results);
        }else{
            for(var s = 0; s < benefits.creditsLimits.length; s++){
                if(benefits.creditsLimits[s].id == benefitToApply.id){
                    benefits.creditsLimits[s] = results;
                }
            }
        }
    }

    if(callback){
        callback(results);
    }
}

function calculateCreditLimit(data, product, productPrice, isCutOffDate){
    if(productPrice == null){
        productPrice = product.price * product.quantity;
    }

    var amountToDiscount = 0;
    if(data.value == undefined){var creditLimitAmount = data.amount}else{var creditLimitAmount = data.value};

    if(productPrice > creditLimitAmount){
        productPrice = productPrice - creditLimitAmount;
        amountToDiscount = creditLimitAmount;
        var companyAndBranchSelected = JSON.parse(sessionStorage.getItem('companyAndBranchSelected')) || [];

        if((companyAndBranchSelected.vendor.cash == true || companyAndBranchSelected.vendor.acceptCard == true) && getAccountTypeSelected() == 'paysheetAccount'){
            creditLimitAmount = 0;
        }else{
            return false;
        }
    }else{
        creditLimitAmount = creditLimitAmount - productPrice;
        amountToDiscount = productPrice;
        productPrice = 0;
        if(isCutOffDate == true){
            data.id = "0x0";
        }
    }

    return {"benefitType": "limiteDeCredito", "id": data.id, "name": "Total", "amount": data.amount, "value": creditLimitAmount, "price": productPrice, "isCutOffDate": isCutOffDate,
        "amountToDiscount": amountToDiscount, "catalogTypeId": data.catalogTypeId, "deliveryDate": product.deliveryDate, "type": data.type, "order": data.order};
}

function cash(i, index, benefitToApply, benefits, sharedPrice, productsSelected, userSelectedBenefits, callback){
    var benefit = [];
    var whBenefitToApply = false;

    if(benefits.manyCash.length != 0){
        benefit = benefits.manyCash[0];
        whBenefitToApply = true;
    }

    if (benefit.benefitType == "efectivo" && i != 0) {
        var dataToUse = (whBenefitToApply) ? benefit : benefitToApply;
    } else {
        var dataToUse = benefitToApply;
    }

    var results = calculateCash(dataToUse, productsSelected, sharedPrice);

    if(results != false){
        if(whBenefitToApply == false){
            benefits.manyCash.push(results);
        }else{
            for(var s = 0; s < benefits.manyCash.length; s++){
                if(benefits.manyCash[s].id == benefitToApply.id){
                    benefits.manyCash[s] = results;
                }
            }
        }
    }

    if(callback){
        callback(results);
    }
}

function ars(i, index, benefitToApply, benefits, sharedPrice, productsSelected, userSelectedBenefits, callback){
    var benefit = [];
    var whBenefitToApply = false;

    if(benefits.ARS.length != 0){
        benefit = benefits.ARS[0];
        whBenefitToApply = true;
    }

    if (benefit.benefitType == "ARS" && i != 0) {
        var dataToUse = (whBenefitToApply) ? benefit : benefitToApply;
    } else {
        var dataToUse = benefitToApply;
    }

    var results = calculateARS(dataToUse, productsSelected, sharedPrice);

    if(results != false){
        if(whBenefitToApply == false){
            benefits.ARS.push(results);
        }else{
            for(var s = 0; s < benefits.ARS.length; s++){
                if(benefits.ARS[s].id == benefitToApply.id){
                    benefits.ARS[s] = results;
                }
            }
        }
    }

    if(callback){
        callback(results);
    }
}

function calculateCash(data, product, productPrice){

    var keepRunning = false;
    var companyAndBranchSelected = JSON.parse(sessionStorage.getItem('companyAndBranchSelected')) || [];

    if(companyAndBranchSelected.vendor.cash == true){
        keepRunning = true;
    }else if(companyAndBranchSelected.vendor.acceptCard == true){
        keepRunning = true;
    }

    if(keepRunning == false){
        return false;
    }

    if(productPrice == null){
        productPrice = product.price * product.quantity;
    }

    var amountToDiscount = 0;
    var cashAmount = 0;

    if(data.value == undefined){
        cashAmount = data.amount
    }else{
        cashAmount = data.value
    }

    cashAmount = cashAmount + productPrice;
    amountToDiscount = productPrice;

    return {"benefitType": "efectivo", "id": data.id, "name": "Efectivo", "amount": data.amount, "value": cashAmount,
        "amountToDiscount": amountToDiscount, "catalogTypeId": data.catalogTypeId, "deliveryDate": product.deliveryDate, "type": data.type, "order": data.order};

}

function calculateARS(data, product, productPrice){
    if(productPrice == null){
        productPrice = product.price * product.quantity;
    }

    var amountToDiscount = 0;
    if(data.value == undefined){var arsAmount = data.amount}else{var arsAmount = data.value};

    if(productPrice > arsAmount){
        productPrice = productPrice - arsAmount;
        amountToDiscount = arsAmount;
        arsAmount = 0;
    }else{
        arsAmount = arsAmount - productPrice;
        amountToDiscount = productPrice;
        productPrice = 0;
    }

    return {"benefitType": "ARS", "id": data.id, "name": "Cobertura de Seguro", "amount": data.amount, "value": arsAmount, "price": productPrice,
        "amountToDiscount": amountToDiscount, "catalogTypeId": 41, "deliveryDate": product.deliveryDate, "order": data.order};
}

//function totalsDisplaymentController(benefits, amountTotalFormatted){
//
//    if(whPaymentMethod == true){
//        cashFlow = [];
//        for(var i = 0; i < benefits.length; i++){
//            if(benefits[i].benefitType == 'efectivo'){
//                cashFlow = benefits[i];
//                benefits.splice(i, 1);
//                i = benefits.length + 1;
//            }
//        }
//    }else{
//        cashFlow = 0;
//        for(var i = 0; i < benefits.length; i++){
//            if(benefits[i].benefitType == 'efectivo'){
//                cashFlow = benefits[i].amountToDiscount;
//                benefits.splice(i, 1);
//                i = benefits.length + 1;
//            }
//        }
//    }
//
//
//    return data;
//}

function cashFlowMessageController(){
    try{
        var companyAndBranchSelected = JSON.parse(sessionStorage.getItem('companyAndBranchSelected')) || null;
        var message = "";
        if(companyAndBranchSelected.vendor.cash == true && companyAndBranchSelected.vendor.acceptCard){
            message = "utilizando otro método de pago a continuación.";
        }else if(companyAndBranchSelected.vendor.cash == true){
            message = "en efectivo.";
        }else if(companyAndBranchSelected.vendor.acceptCard == true){
            message = "con tarjeta."
        }

        return message;
    }catch(err){
        throw err;
    }
}


function renderProductsOnTheShoppingCart(){
    var productsSelected = JSON.parse(sessionStorage.getItem('productsSelected')) || [];
    if(productsSelected.length != 0){
        for(var i = 0; i < productsSelected.length; i++){
            var formatPrice = (productsSelected[i].price * productsSelected[i].quantity).toRound(2);
            if(productsSelected[i].categoryname == "tipo monto"){
                productsSelected[i].disabledQuantity = true;
            }else{
                productsSelected[i].disabledQuantity = false;
            }
            if(formatPrice > 999){
                formatPrice = toFormatNumber(formatPrice);
            }
            productsSelected[i].formatPrice = formatPrice;
        }


        clearMustache(".contShoppingCart .container #shoppingCartListProducts");
        clearMustache(".contShoppingCart .totals");
        displayShoppingCartUserInfo();
        var companyAndBranchSelected = JSON.parse(sessionStorage.getItem('companyAndBranchSelected')) || null;
        var isAmmountType = companyAndBranchSelected.provider.ammountType;
        var showQuantity = true;
        if(isAmmountType){
            showQuantity = false;
        }
        $("#shoppingCartListProducts").prepend(Mustache.to_html($("#shoppingCartListProductsTemplate").html(), {products: productsSelected, showQuantity: showQuantity} || {}));
        $(".accountSummary").hide();
        $(".messageBeforeAddProduct").hide();
        $(".btnAlertPOSPaymentMethod").addClass("seen");
        clearTimeout(messageBeforeAddProductTimeOut);
    }

    var removeAllProductsButton = $("#clearAllProducts button");
    removeAllProductsButton.click(function(){
        sessionStorage.removeItem('productsSelected');
        clearShoppingCart(true);
    });

    var removeProductButton = $(".btnRemove");
    removeProductButton.click(function(){
        removeProductInShoppingCart(this);
    });

    var shoppingCartListProductsInputQuantity = $("#shoppingCartListProducts input");
    shoppingCartListProductsInputQuantity.change(function(){
        shoppingCartInputQuantityRecalculate(this);
    });

    totals();

    //Es importante no mover este click function de aquí porque depende de que se imprima los totales2
    var checkoutButton = $("#checkoutButton");
    checkoutButton.click(function(){
        checkOutShoppingCart(this);
    });
    verticalAlign();

    if(responsive()){
        let containerShoppingcart = $(".contShoppingCart .container");
        let shoppingCartListProducts = $("#shoppingCartListProducts");
        let wrapShoppingCart = $(".wrapShoppingCart");
        let userInfo = $("#userInfo");

        let userSelected = JSON.parse(sessionStorage.getItem('userSelected')) || [];
        let accountTypeContainer = 0;
        if(userSelected.companyAccount == true){
            accountTypeContainer = $(".accountTypeContainer").height();
        }

        containerShoppingcart.height(wrapShoppingCart.height() - userInfo.outerHeight() - accountTypeContainer - (parseInt(containerShoppingcart.css("padding-bottom")) * 2));
    }
    $(".userBenefits").click(function(e){
        showUserBenefits(e);
    });
}

function quantityProductsIcon(){
    var productsSelected = JSON.parse(sessionStorage.getItem('productsSelected')) || [];
    var quantityTotal = 0;
    var iconShoppingcart = $(".qtyShoppingCart");
    if(productsSelected.length != 0){
        for(var i = 0; i < productsSelected.length; i++){
            var quantity = productsSelected[i].quantity;
            quantityTotal = quantityTotal + quantity;
        }
        if(quantityTotal > 0){
            iconShoppingcart.addClass("active");
            if(quantityTotal > 999){
                iconShoppingcart.addClass("milPlus");
            }else{
                iconShoppingcart.removeClass("milPlus");
            }
        }else{
            iconShoppingcart.removeClass("active");
        }
        iconShoppingcart.html(quantityTotal);
    }else{
        iconShoppingcart.html("0");
        iconShoppingcart.removeClass("active");
        iconShoppingcart.removeClass("milPlus");
    }
}

function shoppingCartInputQuantityRecalculate(element){
    var productsSelected = JSON.parse(sessionStorage.getItem('productsSelected')) || [];
    var userSelected = JSON.parse(sessionStorage.getItem('userSelected')) || [];

    if(productsSelected.length > 0){
        var index = element.id;
        index = index.replace('q', '');

        var inputQuantity = element.value;
        var product = $("#shoppingCartListProducts .list-group-item #"+index);
        var productPrice = product.next("strong");

        if(inputQuantity <= 0){
            element.value = 1;
            inputQuantity = 1;
        }

        productsSelected[index].quantity = parseInt(inputQuantity);
        var priceRecalculate = parseFloat(productsSelected[index].price) * productsSelected[index].quantity;

        if(priceRecalculate > 999){
            priceRecalculate = toFormatNumber(priceRecalculate.toRound(2));
        }else{
            priceRecalculate = priceRecalculate.toRound(2);
        }

        $(productPrice).text(sessionStorage.getItem('currencySymbol') + priceRecalculate);
        //sessionStorage.setItem('productsSelected', JSON.stringify(productsSelected));
        //addProductToShoppingCart([]);
        var resetShopingCart = false;
        var tempProductsSelected = [];
        splitCalculation([], productsSelected, userSelected, function(status) {
            if(status == true){
                clearMustache(".contShoppingCart .totals");
                totals();
                var checkoutButton = $("#checkoutButton");
                checkoutButton.click(function(){
                    checkOutShoppingCart(this);
                });
            }else{
                setTimeout(() => {
                    messageNoBalance();

                var checkoutButton = $("#checkoutButton");
                checkoutButton.click(function(){
                    checkOutShoppingCart(this);
                });
            }, 500)
            resetShopingCart = true;
            var productsSelected = JSON.parse(sessionStorage.getItem('productsSelected')) || [];
            tempProductsSelected = productsSelected;
        }
    });

    if(resetShopingCart){

        try{
            element.value = tempProductsSelected[index].quantity;
            var priceRecalculate = parseFloat(tempProductsSelected[index].price) * tempProductsSelected[index].quantity;

            if(priceRecalculate > 999){
                priceRecalculate = toFormatNumber(priceRecalculate.toRound(2));
            }else{
                priceRecalculate = priceRecalculate.toRound(2);
            }

            $(productPrice).text(sessionStorage.getItem('currencySymbol') + priceRecalculate);
            sessionStorage.setItem('productsSelected', JSON.stringify(tempProductsSelected));

            clearMustache(".totals");
            totals();
        }catch(err){
            throw err;
        }
    }
}
}

function totals(element){
    var productsSelected = JSON.parse(sessionStorage.getItem('productsSelected')) || [];
    var benefits = [],
        amountTotal = 0,
        subtotal = 0;

    var enterpriseAccount = false;
    if(getAccountTypeSelected() == 'enterpriseAccount'){
        enterpriseAccount = true;
    }
    if(element == undefined || element == null){
        element = 'shoppingCartTotal'
    }else{
        element = 'checkOutTotal'
    }

    if(productsSelected.length != 0){
        for (var i = 0; i < productsSelected.length; i++){
            $.each(productsSelected[i].benefitsApplied, function(e, p) {
                if(benefits.length != 0){

                    if(p.benefitType == "limiteDeCredito"){
                        amountTotal = amountTotal + p.amountToDiscount;
                    }
                    else{
                        var status = searchBenefitId(p.id, p.benefitType, benefits);
                        if (status == false) {
                            if(p.benefitType == "tarjetaDeRegalo"){
                                benefits = concateGiftCards(p, benefits);
                            }else{
                                benefits.push(p);
                            }
                        }else{

                            if(typeof status.amountToDiscount == "string"){
                                var tempAmountToDiscount = 0;
                                tempAmountToDiscount = status.amountToDiscount;
                                tempAmountToDiscount = parseFloat(tempAmountToDiscount);
                                tempAmountToDiscount = tempAmountToDiscount.toRound(2);
                                tempAmountToDiscount = parseFloat(tempAmountToDiscount);
                                status.amountToDiscount = tempAmountToDiscount;
                            }else{
                                var tempAmountToDiscount = 0;
                                tempAmountToDiscount = status.amountToDiscount;
                                tempAmountToDiscount = tempAmountToDiscount.toRound(2);
                                tempAmountToDiscount = parseFloat(tempAmountToDiscount);
                                status.amountToDiscount = tempAmountToDiscount;
                            }

                            if(typeof p.amountToDiscount == "string"){
                                var tempAmountToDiscount = 0;
                                tempAmountToDiscount = p.amountToDiscount;
                                tempAmountToDiscount = parseFloat(tempAmountToDiscount);
                                tempAmountToDiscount = tempAmountToDiscount.toRound(2);
                                tempAmountToDiscount = parseFloat(tempAmountToDiscount);
                                p.amountToDiscount = tempAmountToDiscount;
                            }else{
                                var tempAmountToDiscount = 0;
                                tempAmountToDiscount = p.amountToDiscount;
                                tempAmountToDiscount = tempAmountToDiscount.toRound(2);
                                tempAmountToDiscount = parseFloat(tempAmountToDiscount);
                                p.amountToDiscount = tempAmountToDiscount;
                            }

                            status.amountToDiscount = status.amountToDiscount + p.amountToDiscount;
                        }
                    }
                }else{
                    if(p.benefitType != "limiteDeCredito" || b.benefitType != "efectivo"){
                        benefits.push(p);
                    }else{
                        amountTotal = amountTotal + p.amountToDiscount;
                    }
                }

            });
            subtotal = subtotal + parseFloat(productsSelected[i].price * productsSelected[i].quantity);
        }

        benefits.unshift({"benefitType": "subtotal", "name": "Subtotal", "amountToDiscount": subtotal});

        if(benefits.length != 0) {
            benefits = verifyBenefitsDuplicated(benefits, productsSelected[i]);
            benefits = verifyDoubleBenefit(benefits);
            benefits = benefitsCompare(benefits);
            benefits.sort(function (a, b){return a.orderPriority.valueOf() > b.orderPriority.valueOf();})

            for(var i = 0; i < benefits.length; i++){
                benefits[i].unformatedAmount = benefits[i].amountToDiscount;
                var amountToDiscount = benefits[i].amountToDiscount;
                if( typeof amountToDiscount == "string"){
                    amountToDiscount = parseFloat(amountToDiscount);
                }
                amountToDiscount = amountToDiscount.toRound(2);
                amountToDiscount = parseFloat(amountToDiscount);
                amountToDiscount = toFormatNumber(amountToDiscount);
                benefits[i].amountToDiscount = amountToDiscount;

            }

            for(var n = 0; n < benefits.length; n++){
                if(benefits[n].amountToDiscount == undefined || benefits[n].amountToDiscount == 0 || benefits[n].amountToDiscount == null){
                    benefits.splice(n, 1);
                    n = n - 1;
                }
            }

            amountTotal = parseFloat(amountTotal).toRound(2);
            var amountTotalFormatted = toFormatNumber(amountTotal);

            //var cashAmount = [];
            //var benefitsToDisplay = totalsDisplaymentController(benefits, amountTotalFormatted);
            //if(getPaymentMethodSelected() == 'paysheet'){
            //    cashAmount = totalsDisplaymentController(benefits, true);
            //}else{
            //    cashAmount = totalsDisplaymentController(benefits, false);
            //    amountTotalFormatted = cashAmount;
            //    cashAmount = [];
            //}

            if(element == "shoppingCartTotal"){
                var cashAmount = [];
                if(getPaymentMethodSelected() == 'paysheet'){
                    for(var i = 0; i < benefits.length; i++){
                        if(benefits[i].benefitType == 'efectivo'){
                            cashAmount = benefits[i];
                            benefits.splice(i, 1);
                            i = benefits.length + 1;
                        }
                    }
                }else{
                    cashAmount = 0;
                    for(var i = 0; i < benefits.length; i++){
                        if(benefits[i].benefitType == 'efectivo'){
                            cashAmount = benefits[i].amountToDiscount;
                            benefits.splice(i, 1);
                            i = benefits.length + 1;
                        }
                    }

                    amountTotalFormatted = cashAmount;
                    cashAmount = [];
                }

                cashAmount.message = cashFlowMessageController();
                for(var a = 0; a < benefits.length; a++){
                    benefits[a].name = benefits[a].name.replace("Impuesto Tipo Monto", "Impuesto");
                }
                totalsListGroup.prepend(Mustache.to_html($("#totalsTemplate").html(), {
                        detailTotals: benefits,
                        cashFlow: cashAmount,
                        amountTotal:  amountTotalFormatted
                    } || {}));
                verticalAlign();
            }else{
                var cashAmount = [];
                var isCombinated = false;
                if(getPaymentMethodSelected() == 'paysheet'){
                    for(var i = 0; i < benefits.length; i++){
                        if(benefits[i].benefitType == 'efectivo'){
                            cashAmount = benefits[i];
                            benefits.splice(i, 1);
                            i = benefits.length + 1;
                        }
                    }

                    isCombinated = true;
                }else{
                    for(var i = 0; i < benefits.length; i++){
                        if(benefits[i].benefitType == 'efectivo'){
                            benefits[i].name = 'Total Efectivo';
                            i = benefits.length + 1;
                        }
                        if(i <= benefits.length){
                           benefits[i].name = benefits[i].name.replace("Impuesto Tipo Monto", "Impuesto");
                        }
                    }

                    cashAmount = benefits;
                    benefits = [];
                }

                var totalCheckout = $("#totalCheckOut");
                cashAmount.message = cashFlowMessageController();
                var isPharmacy = JSON.parse(sessionStorage.getItem('isPharmacy'));

                for(var a = 0; a < benefits.length; a++){
                    benefits[a].name = benefits[a].name.replace("Impuesto Tipo Monto", "Impuesto");
                }
                totalCheckout.html(Mustache.to_html($("#totalCheckOutTemplate").html(), {
                        detailTotals: benefits,
                        cashFlow: cashAmount,
                        amountTotal:  amountTotalFormatted,
                        isCombinated: isCombinated,
                        enterpriseAccount: enterpriseAccount,
                        isPharmacy: isPharmacy
                    } || {}));
                maskPinField();
            }

            if(typeof cashAmount == 'object'){
                sessionStorage.setItem('cashFlow', JSON.stringify(cashAmount));
            }else{
                console.log('cashAmount format is wrong');
            }

            //ajusteVertical();
            //var contentSC = $(".contentShoopingCart").height();
            //var headerSC = $(".headerShoopingCart").height();
            //var totalsHeight = $(".totals").outerHeight() + 40;
            //if($(".contProducts").hasClass("OBA")){
            //    var height = contentSC - totalsHeight;
            //}else{
            //    var height = contentSC - (headerSC + totalsHeight);
            //}
            //
            //$(".contProducts").height(height);
        }

        //$(".shoppingCart").removeClass("empty");
    }else{
        sessionStorage.removeItem('productsSelected');
        clearShoppingCart(true);
    }

    $('.quantity').keypress(function(e) {
        // between 0 and 9
        if (e.which < 48 || e.which > 57) {
            if(e.which != 0 && e.which != 8){
                return(false);  // stop processing
            }
        }
    });
}

function maskPinField(){
    $( "#pinField" ).keyup(function( event ) {
        //if(event.keyCode == 110){
        //    $('#pinField').val($('#pinField').val().slice(0, -1));
        //}
        //if($('#pinField').val().length <= 4 && event.keyCode != 8 ){
        //    if($('#pinField').val() == ""){
        //        $('#pinField').val("");
        //    }
        //    //$('#maskPinField').val($('#pinField').val());
        //}

        if(event.keyCode == 13){
            $("#checkOutProcessButton").trigger("click");
        }
    });
    //$( "#maskPinField" ).focus(function() {
    //    $('#pinField').focus();
    //});
}
function searchBenefitId(id, type,  data){
    var status = false;
    $.each(data, function(i, d) {
        if(id == d.id && type == d.benefitType){
            status = d;
        }
    });
    return status;
}

<!-- GiftCards Functions -- GifcardsInfo -->
function getRightGiftCards(userSelected){
    var productsSelected = JSON.parse(sessionStorage.getItem('productsSelected')) || [];
    var index = productsSelected.length;
    var newGiftcardValues = JSON.parse(sessionStorage.getItem('newGiftcardValues')) || [];
    var giftCards = [];
    if(newGiftcardValues.length > 0){
        for(var i = 0; i < newGiftcardValues.length; i++){
            if(newGiftcardValues[i].amount > 0){
                newGiftcardValues[i].index = index;
                giftCards.push(newGiftcardValues[i]);
            }
        }
    }else{
        giftCards = userSelected.giftCards;
    }

    return giftCards;
}

function addGiftCardBenefit(apply, benefits){
    var order = 0;
    var exist = false;
    for (var i = 0; i < benefits.length; i++){
        if(benefits[i].benefitType == "tarjetaDeRegalo"){
            exist = true;
        }
    }
    if(apply == true){
        if(exist == false){
            for (var i = 0; i < benefits.length; i++){
                if(benefits[i].benefitType == "subsidio"){
                    order = benefits[i].order;
                }
            }
            benefits.push({id: "000", benefitType: "tarjetaDeRegalo", order:parseInt(order) + 1});
            for (var e = 0; e < benefits.length; e++){
                if(parseInt(benefits[e].order) == parseInt(order) + 1 && benefits[e].benefitType != "tarjetaDeRegalo"){
                    benefits[e].order = parseInt(benefits[e].order) + 1;
                }else if(parseInt(benefits[e].order) > parseInt(order) + 1){
                    benefits[e].order = parseInt(benefits[e].order) + 1;
                }
            }
        }
    }else{
        if(exist == false){
            benefits.push({id: "000", benefitType: "tarjetaDeRegalo", order:parseInt(order) + 1});
            for (var e = 0; e < benefits.length; e++){
                if(parseInt(benefits[e].order) == parseInt(order) + 1 && benefits[e].benefitType != "tarjetaDeRegalo"){
                    benefits[e].order = parseInt(benefits[e].order) + 1;
                }else if(parseInt(benefits[e].order) > parseInt(order) + 1){
                    benefits[e].order = parseInt(benefits[e].order) + 1;
                }
            }
        }
    }

    return benefits;
}

function giftCard(userBenefits, productPrice, order){
    if(productPrice == null){
        productPrice = product.price * product.quantity;
    }
    userBenefits = filterGiftCardCalendar(userBenefits, userBenefits.giftCards, null);

    var amountToDiscount = 0;
    var status = true;
    var id = 0;
    var giftCardAmount = 0;
    var giftCardsSaved = JSON.parse(sessionStorage.getItem('giftCardsSaved')) || [];
    var newGiftcardValues = JSON.parse(sessionStorage.getItem('newGiftcardValues')) || [];
    var userSelected = JSON.parse(sessionStorage.getItem('userSelected')) || [];
    var dataToReturn = [];
    $.each(userBenefits.giftCards, function(i, p) {
        p.benefitType = "tarjetaDeRegalo";
        p.name = "Tarjeta de Regalo";
        p.order = order;


        if (giftCardsSaved.length != 0) {
            var giftCardsSavedGroup = [];
            for (var i = 0; i < giftCardsSaved.length; i++) {
                if (p.id == giftCardsSaved[i].id) {
                    giftCardsSavedGroup.push(giftCardsSaved[i]);
                }
            }

            if(giftCardsSavedGroup.length > 0){
                var indexGCS = giftCardsSavedGroup.length - 1;
                giftCardAmount = parseFloat(giftCardsSavedGroup[indexGCS].amount);
                id = giftCardsSaved[indexGCS].id;
            }else{
                status = false;
            }

        } else {
            status = false;
        }

        if (status == false) {
            for(var s = 0; s < userBenefits.giftCards.length; s++){
                if(p.id == userBenefits.giftCards[s].id){
                    var giftCardAmount = parseFloat(userBenefits.giftCards[s].amount);
                    var id = p.id;
                    s = userBenefits.giftCards.length + 1;
                }
            }
        }

        if (productPrice > giftCardAmount) {
            productPrice = productPrice - giftCardAmount;
            amountToDiscount = giftCardAmount;
            giftCardAmount = 0;
        }
        else {
            giftCardAmount = giftCardAmount - productPrice;
            amountToDiscount = productPrice;
            productPrice = 0;
        }


        if(typeof giftCardAmount == "string"){
            giftCardAmount = parseFloat(giftCardAmount);
            giftCardAmount = giftCardAmount.toRound(2);
        }else{
            giftCardAmount = giftCardAmount.toRound(2);
        }

        if(typeof amountToDiscount == "string"){
            amountToDiscount = parseFloat(amountToDiscount);
            amountToDiscount = amountToDiscount.toRound(2);
            amountToDiscount = parseFloat(amountToDiscount);
        }else{
            amountToDiscount = amountToDiscount.toRound(2);
            amountToDiscount = parseFloat(amountToDiscount);
        }

        //if(giftCardAmount > 999){
        //    giftCardAmount = giftCardAmount.toRound(2);
        //    giftCardAmount = toFormatNumber(giftCardAmount);
        //}else{
        //    giftCardAmount = giftCardAmount.toRound(2);
        //}

        var newGiftcardValuesPush = true;
        if(newGiftcardValues.length > 0){
            for(var n = 0; n < newGiftcardValues.length; n++){
                if(newGiftcardValues[n].id == p.id){
                    newGiftcardValues[n].amount = giftCardAmount;
                    newGiftcardValues[n].value = amountToDiscount;
                    newGiftcardValues[n].amountToDiscount = amountToDiscount;
                    newGiftcardValues[n].price = productPrice;
                    newGiftcardValuesPush = false;
                    n = newGiftcardValues.length + 1;
                }
            }
        }

        if(newGiftcardValuesPush){
            newGiftcardValues.push({"benefitType": p.benefitType, "id": id,"name": p.name, "amount": giftCardAmount, "value": amountToDiscount,
                "amountToDiscount": amountToDiscount, "price": productPrice, "nameUser": p.nameUser, "userId": p.userId, "order": order, "startDate": p.startDate, "expiredDate": p.expiredDate, "expiredDateWithoutFormat": p.expiredDateWithoutFormat});
        }

        p.amount = giftCardAmount;
        p.amountToDiscount = amountToDiscount;
        p.price = productPrice;
        p.order = order;

        var toPush = true;
        if(giftCardsSaved.length > 0){
            for(var n = 0; n < giftCardsSaved.length; n++){
                if(giftCardsSaved[n].id == p.id){
                    giftCardsSaved[n] = p;
                    toPush = false;
                }
            }
        }else{
            toPush = true;
        }

        if(toPush){
            giftCardsSaved.push(p);
        }

        dataToReturn.push(p);

    });

    sessionStorage.setItem('newGiftcardValues', JSON.stringify(newGiftcardValues));
    sessionStorage.setItem("giftCardsSaved", JSON.stringify(giftCardsSaved));

    return dataToReturn;
}

function filterGiftCardCalendar(naturalData, giftCards, catalog){
    var catalogSelected = JSON.parse(sessionStorage.getItem('catalogSelected')) || catalog;
    var giftCardsFiltered = [];

    for(var i = 0; i < giftCards.length; i++){
        var giftCard = giftCards[i];
        var deliveryDate = catalogSelected.deliveryDate.split("/");
        var now = new Date();
        var minutes = now.getMinutes();
        minutes = minutes < 10 ? '0'+minutes : minutes;
        var currentDateTime = new Date(deliveryDate[1] + "/" + deliveryDate[0] + "/" + deliveryDate[2] + " " + now.getHours() + ":" + minutes );
        var startDate = new Date(giftCard.startDate);
        var expiredDateWithoutFormat = new Date(giftCard.expiredDateWithoutFormat);
        if(currentDateTime >= startDate && currentDateTime <= expiredDateWithoutFormat){
            giftCardsFiltered.push(giftCard);
        }
    }

    naturalData.giftCards = giftCardsFiltered;

    return naturalData;
}
function concateGiftCards(p, benefits){
    var status = false;
    $.each(benefits, function(i, b) {
        if(p.benefitType == b.benefitType){
            b.amountToDiscount = b.amountToDiscount + p.amountToDiscount;
            //benefits.splice(i, 1);
            //benefits.push(b);
            status = true;
        }
    });
    if(status == false){
        benefits.push({"benefitType": "tarjetaDeRegalo", "name": "Tarjeta de Regalo", "order": p.order, "amountToDiscount":  p.amountToDiscount});
    }
    return benefits;
}

<!-- END -->

function getBenefitToApply( index, data){
    var value = false;
    for (var e = 0; e < data.length; e++){
        if(data[e].order == index){
            value = data[e];
        }
    }
    return value;
}

function verifyDoubleBenefit(benefitsOrder){

    var realOrder = [];
    var order = 1;

    benefitsOrder.sort(function (a, b){return a.order.valueOf() > b.order.valueOf() || -(a.order.valueOf() < b.order.valueOf());})

    for(var i = 0; i < benefitsOrder.length; i++){
        benefitsOrder[i].order = order;

        realOrder.push(benefitsOrder[i]);

        order++;
    }

    return realOrder;
}

function benefitsCompare(benefits){
    for(var i = 0; i < benefits.length; i++){
        switch(benefits[i].benefitType) {
            case 'subtotal':
                benefits[i].orderPriority = 0;
                break;
            case 'taxes':
                benefits[i].orderPriority = 1;
                break;
            case 'tax10':
                benefits[i].orderPriority = 2;
                break;
            default:
                benefits[i].orderPriority = 3;
        }
    }

    return benefits;
}

function verifyBenefitsDuplicated(benefits){
    var catalogSelected = JSON.parse(sessionStorage.getItem('catalogSelected')) || [];
    var giftCards = JSON.parse(sessionStorage.getItem('giftCards')) || null;

    var arrangeBenefits =
        {
            0: [],
            1: [],
            2: []
        }
        ;

    var hasSubsidy = false;
    var constBenefits = [];
    var giftCardItem = false;

    for(var i = 0; i < benefits.length; i++){
        switch (benefits[i].benefitType){
            case 'subsidio':
                hasSubsidy = true;
                arrangeBenefits[0].push(benefits[i]);
                break;
            case 'asignacion':
                arrangeBenefits[1].push(benefits[i]);
                break;
            case 'asignacionDiaria':
                arrangeBenefits[2].push(benefits[i]);
                break;
            default :
                if(benefits[i].benefitType != "tarjetaDeRegalo"){
                    constBenefits.push(benefits[i]);
                }else{
                    giftCardItem = benefits[i];
                }

        }
    }

    var tempBenefits = [];
    for(var e = 0; e < 3; e++){
        var amount = 0;
        var element = arrangeBenefits[e];
        if(element.length != 0){
            for(var n = 0; n < element.length; n++){
                amount = amount + element[n].amountToDiscount;
                if(element[n].catalogTypeId == catalogSelected.id){
                    var currentBenefit = element[n];
                }else {
                    var currentBenefit = element[0];
                }
            }

            currentBenefit.amountToDiscount = amount;
            tempBenefits.push(currentBenefit);
        }
    }

    for(var c = constBenefits.length - 1; c >= 0; c--){
        tempBenefits.unshift(constBenefits[c]);
    }


    for(var s = 0; s < tempBenefits.length; s++){
        if(tempBenefits[s].order == undefined){
            tempBenefits[s].order = 0;
        }
    }

    var remakingArray = [];
    if(giftCardItem != false && hasSubsidy == true){
        if(giftCards.applyAfterSubsidy == true){
            for(var z = 0; z < tempBenefits.length; z++){
                if(tempBenefits[z].benefitType == "subsidio"){
                    tempBenefits[z].order = tempBenefits[z].order;
                    remakingArray.push(tempBenefits[z]);
                    remakingArray.push(giftCardItem);
                }else{
                    remakingArray.push(tempBenefits[z]);
                }
            }
        }else{
            for(var z = 0; z < tempBenefits.length; z++){
                if(tempBenefits[z].benefitType == "subsidio"){
                    tempBenefits[z].order = tempBenefits[z].order;
                    remakingArray.push(giftCardItem);
                    remakingArray.push(tempBenefits[z]);
                }else{
                    remakingArray.push(tempBenefits[z]);
                }
            }
        }

        tempBenefits = remakingArray;
    }else if(giftCardItem != false){
        tempBenefits.push(giftCardItem);
    }



    return tempBenefits;
}

function checkIfHasLimitAmount(currentItem, benefitValue){
    var itemsBenefitsReached = JSON.parse(sessionStorage.getItem('itemsBenefitNoReached')) || [];

    //var itemAmount = (currentItem.montoDescontar == undefined) ? 0 : currentItem.montoDescontar;
    if(itemsBenefitsReached.length != 0){

        for(var n = 0; n < itemsBenefitsReached.length; n++){
            if(itemsBenefitsReached[n].deliveryDate == currentItem.deliveryDate){
                if(itemsBenefitsReached[n].benefitType == currentItem.benefitType &&
                    itemsBenefitsReached[n].subsidyDetailId == currentItem.subsidyDetailId){

                    if(currentItem.index >= itemsBenefitsReached[n].index){
                        return true;
                    }
                }
            }
        }
    }

    if(currentItem.benefitType == 'subsidio'){

        switch (currentItem.type)
        {
            case "1":
                var limitPerDayReached = false;
                if(currentItem.limitPerDayIndicator == true){
                    limitPerDayReached = checkLimitPerDay(currentItem);
                }

                var quantityAppliedReached = CheckQuantityApplied(currentItem);

                if(quantityAppliedReached){
                    itemsBenefitsReached.push(currentItem);
                    sessionStorage.setItem('itemsBenefitNoReached', JSON.stringify(itemsBenefitsReached));
                }
                break;
            case "2":

                var value2 = checkDayAplicationIndicator(currentItem);
                var value1 = checkBenefitValue(benefitValue);

                if(value1 || value2){
                    var value = true;
                }

                if(value){
                    itemsBenefitsReached.push(currentItem);
                    sessionStorage.setItem('itemsBenefitNoReached', JSON.stringify(itemsBenefitsReached));
                }
                break;
            case "3":

                var value = checkDayAplicationIndicator(currentItem);

                if(value){
                    itemsBenefitsReached.push(currentItem);
                    sessionStorage.setItem('itemsBenefitNoReached', JSON.stringify(itemsBenefitsReached));
                }

                break;
            default:
                var value = checkBenefitValue(benefitValue);

                if(value){
                    currentItem.index = currentItem.index + 1;
                    itemsBenefitsReached.push(currentItem);
                    sessionStorage.setItem('itemsBenefitNoReached', JSON.stringify(itemsBenefitsReached));
                }
                break;
        }

    }else{
        var value = checkBenefitValue(currentItem);
        if(value){
            currentItem.index = currentItem.index + 1;
            itemsBenefitsReached.push(currentItem);
            sessionStorage.setItem('itemsBenefitNoReached', JSON.stringify(itemsBenefitsReached));
        }
    }


    return false;
}

function checkDayAplicationIndicator(currentItem){
    if(currentItem.dayAplicationIndicator == "true"){
        var tempDayApplication = (currentItem.toPercentValueDA) ? currentItem.toPercentValueDA : currentItem.quantityApplied;
    }else{
        var tempDayApplication = undefined;
    }

    if(tempDayApplication <= 0){
        return true;
    }

    return false;
}

function checkBenefitValue(benefitValue){
    if(benefitValue == 0){
        return true;
    }

    return false;
}

function checkLimitPerDay(currentItem){
    if(currentItem.limitPerDay <= 0){
        return true;
    }

    return false;
}

paymentMethodsButtons.click(function(){
    var paymentMethodSelected = $(this);
    var name = paymentMethodSelected.text();
    var productsSelected = JSON.parse(sessionStorage.getItem('productsSelected')) || null;
    var isPharmacy = JSON.parse(sessionStorage.getItem('isPharmacy')) || [];

    if(!$(this).hasClass("btn-primary")){
        $(".changePaymentMethod").remove();

        if (productsSelected != null) {
            $("#shoppingCartListProducts").before("<div class='changePaymentMethod show animated00 fadeInDown'><p>El cambio a <strong>" + name + "</strong>, eliminará los productos del carrito. ¿Desea continuar?</p><button title='Aceptar' class='btnGreen btnAdd changePayment'>Aceptar</button><a href='#' title='Cerrar' class='btnClose'></a></div>");
            $(".confirmRemoveArs").remove();
            if(isPharmacy == true && $("#arsBenefitBox").hasClass("d-none")){
                $("#arsBenefit").removeClass("d-none").addClass("d-block");
            }
            var element = $("#confirmRemoveArs");
            element.removeClass("d-block").addClass("d-none");

            $(".changePaymentMethod .changePayment").click(function () {
                $(".paymentMethodButtons").removeClass("btn-primary").addClass("btn-secondary");
                paymentMethodSelected.removeClass("btn-secondary").addClass("btn-primary");
                $(".messageBeforeAddProduct").hide();
                $(".changePaymentMethod").remove();
                clearShoppingCart(true);

            });
            $(".changePaymentMethod .btnClose").click(function () {
                $(".changePaymentMethod").remove();
            });
        }else {
            $(".paymentMethodButtons").removeClass("btn-primary").addClass("btn-secondary");
            paymentMethodSelected.removeClass("btn-secondary").addClass("btn-primary");
            $(".messageBeforeAddProduct").hide();
            clearShoppingCart(true);
        }
    }
});

function getPaymentMethodSelected(){
    for(var i = 0; i < paymentMethodsButtons.length; i++){
        var currentPaymentMethod = paymentMethodsButtons[i];
        if(jQuery.inArray('btn-primary', currentPaymentMethod.classList) != -1){
            return currentPaymentMethod.id;
        }
    }
}

function getPaymentMethodsSelectedKey(){
    for(var i = 0; i < paymentMethodsButtons.length; i++){
        var currentPaymentMethod = paymentMethodsButtons[i];
        if(jQuery.inArray('btn-primary', currentPaymentMethod.classList) != -1){
            return currentPaymentMethod.attributes["data-key"].value;
        }
    }
}

function getSubPaymentMethodsSelectedKey(){
    var cashFlow = JSON.parse(sessionStorage.getItem('cashFlow')) || null;
    var companyAndBranchSelected = JSON.parse(sessionStorage.getItem('companyAndBranchSelected')) || null;

    if(getPaymentMethodSelected() == "paysheet" && cashFlow.amountToDiscount != undefined){
        if(checkBothPaymentMethodsAreActive() == true){
            var bothPaymentMethodsButtonsSelected = $(".bothPaymentMethodsButtons.active");
            return bothPaymentMethodsButtonsSelected[0].attributes["data-key"].value;
        }

        if(checkIfAPaymentMethodsIsActive() == true){
            var cashFlowContainer = $("#cashFlowContainer:visible");
            if(cashFlowContainer.length > 0){
                if(companyAndBranchSelected != null){
                    if( companyAndBranchSelected.vendor.cash == true ){
                        return 2;
                    }

                    if( companyAndBranchSelected.vendor.acceptCard == true ){
                        return 3;
                    }
                }
            }
        }
    }

    return undefined;
}

accountTypeTabs.click(function(){
    var oldAccountTypeSelected = getAccountTypeSelected();
    var userInfo = $("#userInfo");
    var paysheetMethod = $("#paysheet");
    var productsSelected = JSON.parse(sessionStorage.getItem("productsSelected")) || null;

    if(this.id != oldAccountTypeSelected){

        if (productsSelected != null) {
            if(responsive()){
                showShoppingCartMobile();
            }
            var name = $(this).text();
            $(".changePaymentMethod").remove();
            $("#shoppingCartListProducts").before("<div class='changePaymentMethod changeAcountType show animated00 fadeInDown'><p>El cambio a <strong>" + name + "</strong>, eliminará los productos del carrito. ¿Desea continuar?</p><button title='Aceptar' class='btnGreen btnAdd changeAccount'>Aceptar</button><a href='#' title='Cerrar' class='btnClose'></a></div>");
            var these = this;

            $(".confirmRemoveArs").remove();
            var element = $("#confirmRemoveArs");
            element.removeClass("d-block").addClass("d-none");

            $(".changeAcountType .changeAccount").click(function () {

                $('.nav-tabs a[id="'+ these.id +'"]').addClass('active');
                $('.nav-tabs a[id="'+ oldAccountTypeSelected +'"]').removeClass("active");
                clearShoppingCart();
                if(these.id == 'paysheetAccount'){
                    userInfo.removeClass("enterpriseAccount");
                    paymentMethodsDisplayer(these.id);
                    var userSelected = JSON.parse(sessionStorage.getItem('userSelected')) || [];
                    var isPharmacy = JSON.parse(sessionStorage.getItem('isPharmacy')) || [];

                    if(isPharmacy == true){
                        setPharmacyUserSelected(1, userSelected.id, userSelected.name, userSelected.employeeCode, userSelected.companyAccount)
                    }else{
                        setUserSelected(1, userSelected.id, userSelected.name, userSelected.employeeCode, userSelected.companyAccount);
                    }

                }
                if(these.id == 'enterpriseAccount'){
                    paysheetMethod.trigger("click");
                    userInfo.addClass("enterpriseAccount");
                    if(getIfArsIsAvaliable()){
                        $("#arsBenefit").removeClass("d-block");
                        $("#arsBenefit").addClass("d-none");
                    }
                    paymentMethodsDisplayer(these.id);
                    var userSelected = JSON.parse(sessionStorage.getItem('userSelected')) || [];
                    setUserSelected(2, userSelected.id, userSelected.name, userSelected.employeeCode, userSelected.companyAccount);
                }
                $(".changeAcountType").remove();
            });
            $(".changeAcountType .btnClose").click(function () {
                $(".changeAcountType").remove();
            });

        }else{
            $('.nav-tabs a[id="'+ this.id +'"]').addClass('active');
            $('.nav-tabs a[id="'+ oldAccountTypeSelected +'"]').removeClass("active");
            clearShoppingCart();
            if(this.id == 'paysheetAccount'){
                userInfo.removeClass("enterpriseAccount");
                paymentMethodsDisplayer(this.id);
                var userSelected = JSON.parse(sessionStorage.getItem('userSelected')) || [];
                var isPharmacy = JSON.parse(sessionStorage.getItem('isPharmacy')) || [];

                if(isPharmacy == true){
                    setPharmacyUserSelected(1, userSelected.id, userSelected.name, userSelected.employeeCode, userSelected.companyAccount)
                }else{
                    setUserSelected(1, userSelected.id, userSelected.name, userSelected.employeeCode, userSelected.companyAccount);
                }
            }
            if(this.id == 'enterpriseAccount'){
                paysheetMethod.trigger("click");
                userInfo.addClass("enterpriseAccount");

                if(getIfArsIsAvaliable()){
                    $("#arsBenefit").removeClass("d-block");
                    $("#arsBenefit").addClass("d-none");
                }

                paymentMethodsDisplayer(this.id);
                var userSelected = JSON.parse(sessionStorage.getItem('userSelected')) || [];
                setUserSelected(2, userSelected.id, userSelected.name, userSelected.employeeCode, userSelected.companyAccount);
            }
            $(".changeAcountType").remove();
        }
    }
});

function paymentMethodsDisplayer(accountTypeSelected){
    try{
        var companyAndBranchSelected = JSON.parse(sessionStorage.getItem('companyAndBranchSelected')) || null;
        var display = false;

        if(accountTypeSelected == undefined || accountTypeSelected == null){
            accountTypeSelected = getAccountTypeSelected()
        }

        if(accountTypeSelected == "paysheetAccount"){
            if(companyAndBranchSelected.vendor.cash == true){
                display = true;
            }else if(companyAndBranchSelected.vendor.acceptCard == true){
                display = true;
            }
        }

        if(display){
            paymentMethods.show();
            //messageBeforeAddProduct.show();
        }
    }catch(err){
        throw err;
    }
}

function getAccountTypeSelected(){
    var accountTypeTabSelected = $(".accountTypeContainer #accountTypes li a.active");
    return accountTypeTabSelected[0].id;
}

function clearShoppingCart(stillShowingPaymentMethods){
    if(stillShowingPaymentMethods != true){
        paymentMethods.hide();
    }

    sessionStorage.removeItem('productsSelected');
    sessionStorage.removeItem('cashFlow');
    sessionStorage.removeItem('giftCardsSaved');
    sessionStorage.removeItem('newGiftcardValues');
    clearMustache(".contShoppingCart .container #shoppingCartListProducts");
    clearMustache(".contShoppingCart .totals");
    quantityProductsIcon();
}

function removeProductInShoppingCart(element){
    var productsSelected = JSON.parse(sessionStorage.getItem("productsSelected")) || [];
    var userSelected = JSON.parse(sessionStorage.getItem('userSelected')) || [];
    // var getGiftCardsSaved = JSON.parse(sessionStorage.getItem('giftCardsSaved')) || null;
    //var newGiftcardValues = JSON.parse(sessionStorage.getItem('newGiftcardValues')) || null;

    if(!element){
        element = window.event;
    }

    var product = $(element.target).parent();

    var productToRemoveIndex = element.id;
    productToRemoveIndex = parseInt(productToRemoveIndex);
    for(var k = 0; k < productsSelected.length; k++){
        if(productsSelected[k].index == productToRemoveIndex){
            var productToRemove = productsSelected[k];
        }
    }

    /*if(getGiftCardsSaved != null){
     if(productToRemove.giftCardSelected != []){
     for(var n = 0; n < productToRemove.giftCardSelected.length; n++){
     var currentProductGiftCard = productToRemove.giftCardSelected[n];
     var counter = 0;

     for(var u = 0; u <  getGiftCardsSaved.length; u++){
     if(currentProductGiftCard.id == getGiftCardsSaved[u].id){
     counter++;
     }
     }

     if(counter <= 1){
     for(var e = 0; e < newGiftcardValues.length; e++){
     if(currentProductGiftCard.id == newGiftcardValues[e].id){
     newGiftcardValues.splice(e, 1);
     e = newGiftcardValues.length + 1;
     }
     }
     }

     if(newGiftcardValues.length != 0){
     sessionStorage.setItem('newGiftcardValues', JSON.stringify(newGiftcardValues));
     }else{
     sessionStorage.removeItem('newGiftcardValues');
     }
     }
     }
     }
     */
    productsSelected.splice(productToRemoveIndex, 1);
    //sessionStorage.removeItem('giftCardsSaved');
    splitCalculation([], productsSelected, userSelected, function(status) {
        if(status == true){
            renderProductsOnTheShoppingCart();
        }else{
            alert('ha ocurrido un error no esperado');
        }
    });

    sessionStorage.setItem('productsSelected', JSON.stringify(productsSelected));

    if(responsive()){
        if(productsSelected.length == 0){
            clearShoppingCart(true);
            hideShoppingCartMobile();
            paymentMethodsDisplayer(getAccountTypeSelected());
            $(".userBenefits").click(function(e){
                showUserBenefits(e);
            });
        }else{
            showShoppingCartMobile();
        }
    }else{
        if(productsSelected.length == 0){
            clearShoppingCart(true);
            paymentMethodsDisplayer(getAccountTypeSelected());
        }
    }
    quantityProductsIcon();
}

function checkOutShoppingCart(element){

    var companyAndBranchSelected = JSON.parse(sessionStorage.getItem('companyAndBranchSelected')) || null;
    var isAmmountType = companyAndBranchSelected.provider.ammountType;

    var data = JSON.parse(sessionStorage.getItem("productsSelected"));
    var last_index = 0;
    var total = 0;
    var enterpriseAccount = false;
    var user = JSON.parse(sessionStorage.getItem("userSelected"));

    for(var i = 0; i < data.length; i++){
        var benefit = 0;
        var quantity = data[i].quantity;
        var price = data[i].price;
        var subtotal = 0;
        var servicesTax = 0;
        var taxes = 0;
        var cashAmount = 0;
        var ARSAmount = 0;
        var bool = "";

        if(getAccountTypeSelected() == 'enterpriseAccount'){
            enterpriseAccount = true;
        }

        //Calculate the Subtotal
        subtotal = price * quantity;
        subtotal = toFormatNumber(subtotal);
        data[i].price = subtotal;

        //Add to the JSON a node that store 'true' or 'false' if SpecialRequestSelected has data or not.
        //if(data[i].specialRequestsSelected.length == []){
        //    bool = {"hasData": false};
        //    data[i].specialRequestsSelected.push(bool);
        //}else{
        //    bool = {"hasData": true};
        //    data[i].specialRequestsSelected.push(bool);
        //}

        //Store the last index of each benefitsApplied. This is useful to know the real total price .

        var last_index = null;
        for(var n = 0; n < data[i].benefitsApplied.length; n++){
            if (data[i].benefitsApplied[n].benefitType != "limiteDeCredito" && data[i].benefitsApplied[n].benefitType != "efectivo" &&
                data[i].benefitsApplied[n].benefitType != "taxes" && data[i].benefitsApplied[n].benefitType != "tax10" &&
                data[i].benefitsApplied[n].benefitType != "ARS"){

                benefit = parseFloat(benefit) + parseFloat(data[i].benefitsApplied[n].amountToDiscount);
                if(benefit != 0){
                    benefit = parseFloat(benefit);
                    benefit = benefit.toRound(2);
                }
            }

            if(data[i].benefitsApplied[n].benefitType == "limiteDeCredito"){
                last_index = n;
            }

            if(data[i].benefitsApplied[n].benefitType == "tax10"){
                data[i].servicesTaxApplied = true;
                servicesTax =  servicesTax + parseFloat(data[i].benefitsApplied[n].amountToDiscount);
            }

            if(data[i].benefitsApplied[n].benefitType == "efectivo"){
                data[i].cashApplied = true;
                cashAmount =  cashAmount + parseFloat(data[i].benefitsApplied[n].amountToDiscount);
            }

            if(data[i].benefitsApplied[n].benefitType == "taxes"){
                taxes =  taxes + parseFloat(data[i].benefitsApplied[n].amountToDiscount);
                var taxName = data[i].benefitsApplied[n].name;
            }

            if(data[i].benefitsApplied[n].benefitType == "ARS"){
                ARSAmount =  ARSAmount + parseFloat(data[i].benefitsApplied[n].amountToDiscount);
            }
        }

        data[i].servicesTax = toFormatNumber(servicesTax);
        data[i].taxes = toFormatNumber(taxes);
        data[i].taxName = taxName;


        cashAmount = cashAmount.toRound(2);
        if(cashAmount >= 1000){
            cashAmount = toFormatNumber(cashAmount);
        }

        data[i].cashAmount = cashAmount;
        benefit = parseFloat(benefit);
        benefit = toFormatNumber(benefit);
        data[i].ARS = toFormatNumber(ARSAmount);
        data[i].benefitsApplied.push({"benefitTotal": benefit});

        if(last_index != null){
            var tempTotal = data[i].benefitsApplied[last_index].amountToDiscount;
            tempTotal = toFormatNumber(tempTotal);
            total = {"Total": tempTotal}
        }else{
            total = {"Total": "0.00"};
        }

        data[i].benefitsApplied.push(total);


        //Setting an id to use in showSpecialRequestsSelected() function. And retrieve the exactly data from session storage
        data[i].id = i;
    }

    //    Template Popup Product Detail
    $(".checkout").remove();

    var balanceDiarioAvailable = false;
    for(var a = 0; a < user.benefits.length; a++){
        var benefit = user.benefits[a];
        for(var s = 0; s < benefit.balances.length; s++){
            benefit.balances[s].amount = parseFloat(benefit.balances[s].amount);
            if(benefit.balances[s].cssClass == "balanceDiario"){
                balanceDiarioAvailable = true;
                var balanceDiario = parseFloat(benefit.balances[s].amount);
            }

            benefit.balances[s].amount = toFormatNumber(parseFloat(benefit.balances[s].amount));
        }
    }
    if(balanceDiarioAvailable){
        var availableBalance = parseFloat(balanceDiario);
    }else{
        var availableBalance = parseFloat(user.availableBalance);
    }
    availableBalance = toFormatNumber(availableBalance.toRound(2));

    user.availableBalance = availableBalance;
    $(".checkout").remove();
    $(".modalNew").remove();


    for(var a = 0; a < data.length; a++){
        data[a].taxName = data[a].taxName.replace("Impuesto Tipo Monto", " ");
    }
    var showQuantity = true;
    if(isAmmountType){
        showQuantity = false;
    }
    if (responsive()){
        $("#wrap").prepend(Mustache.to_html($("#checkoutMobile").html(), { products: data, enterpriseAccount: enterpriseAccount, user:user, showQuantity:showQuantity } || {}));
    }else{
        $("body").prepend(Mustache.to_html($("#checkout").html(), { products:data, enterpriseAccount: enterpriseAccount, user: user, showQuantity:showQuantity } || {}));
        var checkout = $(".checkout").height();
        var contInfoUserCheckout = $(".contInfoUserCheckout").outerHeight();

        $(".tableCheckout").height(checkout - contInfoUserCheckout - (parseInt($(".tableCheckout ").css("marginTop")) * 2 ));
    }


    if(getIfArsIsAvaliable() == true){
        $(".tableCheckout .arsTH").show();
        $(".tableCheckout .arsTD").show();
    }

    if($('.orderReason').length > 0){
        $('.orderReason').focus();
    }

    totals(element);

    //$(".contProducts").height($(".contentShoopingCart").height() - $(".headerShoopingCart").height() - $(".totals").outerHeight() - (parseInt($(".contProducts").css("marginTop")) + parseInt($(".contProducts").css("marginBottom"))) - 20);


    if (!responsive()){
        $.extend( true, $.fn.dataTable.defaults, {
            "searching": false,
            "scrollCollapse": true,
            "bPaginate": false
        });


        $('#checkboxTable').DataTable(
            {
                "stripeClasses": [],
                "columnDefs": [{type: 'natural', targets: 0}]
            }
        );

    }

    $("#pinField").focus();

    //var getTimeLeft = sessionStorage.getItem('timeLeft') || null;
    //if(getTimeLeft != null) {
    //    timerHandlerBack(getTimeLeft);
    //}
    //popupFunctionality();

    if(enterpriseAccount){
        $("#checkoutProcesar").attr("disabled", "disabled");
    }
    var isPharmacy = JSON.parse(sessionStorage.getItem('isPharmacy'));
    if(isPharmacy == true && getPaymentMethodSelected() == "paysheet"){
        $("#checkOutProcessButton").attr("disabled", "disabled");
    }
    //if($(".orderReason").length == 1){
    //    $("#checkboxTable_wrapper").height($(".checkout").height() - $(".totalCheckout").outerHeight() - $(".checkout .title ").outerHeight() - 20 - $(".orderReason").height() - 30);
    //}else{
    //    $("#checkboxTable_wrapper").height($(".checkout").height() - $(".totalCheckout").outerHeight() - $(".checkout .title ").outerHeight() - 20);
    //}
    popupFunctionality();

    if(PINisActivated() == false){
        var contPinField = $(".contPinField");
        contPinField.hide();
    }

    var reasonOrder = $(".orderReasonContainer textarea");
    if(reasonOrder.length != 0){
        reasonOrder.keyup(function(){
            validateOrderReason();
        });
    }


    var changeOfCashField = $("#changeOfCashField");
    var cashFlow = JSON.parse(sessionStorage.getItem('cashFlow')) || [];
    if(getPaymentMethodSelected() == "paysheet"){
        if(cashFlow.amountToDiscount == 0 || cashFlow.amountToDiscount == undefined){
            cashFlowContainerHide();
        }else{
            if(checkBothPaymentMethodsAreActive()){
                bothPaymentMethodsAreActiveController();
                var bothPaymentMethodsButtons = $(".bothPaymentMethodsButtons");
                bothPaymentMethodsButtons.click(function(){
                    cashFlowContainerShow();
                    if(this.id == "bothCash"){
                        checkoutCashChangeLabels();
                    }else{
                        checkoutCardChangeLabels();
                    }
                });
            }else{
                setPaymentMethodByDefault();
            }

        }
    }else{
        var cashAmount = 0;
        for(var n = 0; n < cashFlow.length; n++){
            if(cashFlow[n].benefitType == "efectivo"){
                if(cashFlow[n].amountToDiscount != undefined){
                    cashAmount = cashFlow[n].amountToDiscount;
                }
            }
        }

        if(getPaymentMethodSelected() == "cash"){
            if(cashAmount == 0){
                cashFlowContainerHide();
            }else{
                cashFlowContainerShow();
            }
        }else{
            checkoutCardChangeLabels();
        }
    }


    //if(changeOfCashField.length > 0){
    //    changeOfCashField.focus();
    //}else{
    //    var pinField = $("#pinField");
    //    pinField.focus();
    //}

    changeOfCashField.change(function(){

        if(cashFlow.length > 1){
            for(var i = 0; i < cashFlow.length; i++){
                if(cashFlow[i].benefitType == 'efectivo'){
                    cashFlow = cashFlow[i];
                }
            }
        }

        if(getPaymentMethodSelected() != "cash"){
            var CashFlowContainer = $("#totalCheckOut .cashFlow");
            CashFlowContainer.hide();
        }

        var cashChangeLabel = $("#cashChange strong");
        var cashPayment = this.value;
        if(cashPayment == ""){
            cashPayment = 0;
        }else{
            cashPayment = parseFloat(cashPayment);
        }
        var cashAmount = parseFloat(cashFlow.unformatedAmount);
        var results = cashPayment - cashAmount;
        if(results < 0){
            results = 0;
        }

        if(results >= 1000){
            results = results.toRound(2);
            results = parseFloat(results);
            results = toFormatNumber(results);

        }else{
            results = results.toRound(2);
        }

        cashChangeLabel.html(sessionStorage.getItem('currencySymbol') + results);
    });

    var checkOutProcessButton = $("#checkOutProcessButton");
    checkOutProcessButton.click(function(){
        checkOutProcessButton.attr('style', 'width: ' + checkOutProcessButton.outerWidth() + 'px !important').height(checkOutProcessButton.height()).html("<div class='loader'></div>").removeClass("btnAdd").removeAttr("onclick").addClass("cursorDefault")
        var reasonOrder = $(".orderReasonContainer textarea");
        if(reasonOrder.length != 0 && reasonOrder.val() == ""){
            validateOrderReason();
            checkOutProcessButton.removeAttr("style").html("Confirmar");
            return false;
        }

        if(PINisActivated()){
            if(checkIsPINSetted() == false){
                checkOutProcessButton.removeAttr("style").html("Confirmar");
                return false;
            }
        }

        var bothPaymentMethodsButtons = $(".bothPaymentMethodsButtons:visible");
        if(bothPaymentMethodsButtons.length > 0) {
            var bothPaymentMethodsButtonsSelected = $(".bothPaymentMethodsButtons.active");
            if(bothPaymentMethodsButtonsSelected.length == 0){
                messageCashCardNoSelected();
                checkOutProcessButton.removeAttr("style").html("Confirmar");
                return false;
            }

            if(getSubPaymentMethodsSelectedKey() == 2){
                var changeOfCashIsRight = changeOfCashController(changeOfCashField, cashFlow, checkOutProcessButton);
                if(changeOfCashIsRight == false){
                    return changeOfCashIsRight;
                }
            }

        }else{
            if(getPaymentMethodSelected() != "card"){
                var cashFlowContainer = $("#cashFlowContainer:visible");
                if(cashFlowContainer.length > 0){
                    var companyAndBranchSelected = JSON.parse(sessionStorage.getItem('companyAndBranchSelected')) || [];
                    if(companyAndBranchSelected.vendor.cash == true){
                        var changeOfCashIsRight = changeOfCashController(changeOfCashField, cashFlow, checkOutProcessButton);
                        if(changeOfCashIsRight == false){
                            return changeOfCashIsRight;
                        }
                    }
                }
            }
        }

        if(checkOutProcessButton.is('[disabled]')){
            checkOutProcessButton.removeAttr("style").html("Confirmar");
            return false;
        }

        checkOutProcessButton.attr("disabled", "disabled");
        orderProcess(this);
    });
}

function changeOfCashController(changeOfCashField, cashFlow, checkOutProcessButton){
    if(changeOfCashField.length > 0){
        var changeOfCashFieldValue = changeOfCashField.val();
        if(changeOfCashFieldValue < parseFloat(cashFlow.amountToDiscount.replace(",", "")) || changeOfCashFieldValue == ""){
            messageCashAmount();
            changeOfCashField.focus();
            checkOutProcessButton.removeAttr("style").html("Confirmar");
            return false;
        }
    }

    return true;
}

function messageCashAmount(){
    let content = $("#changeOfCashField");
    $(".messageCashAmount").remove();
    content.after("<div class='animated00-03 fadeInDown messageCashAmount'>El monto a pagar debe de ser mayor o igual al <strong>Total Efectivo </strong></div>");

    setTimeout(function() {
        $(".messageCashAmount").removeClass("fadeInDown").addClass("fadeOutUp");
        setTimeout(function() {
            $(".messageCashAmount").remove();
        }, 300)
    }, 4000);
}

function messagePIN(){
    let content = $(".contPinField");
    $(".messagePIN").remove();
    content.append("<div class='animated00-03 fadeInDown messagePIN'>Escribe el PIN</div>");

    setTimeout(function() {
        $(".messagePIN").removeClass("fadeInDown").addClass("fadeOutUp");
        setTimeout(function() {
            $(".messagePIN").remove();
        }, 300)
    }, 4000);
}

function messagePINIncorrect(){
    let content = $(".contPinField");
    $(".messagePIN").remove();
    content.append("<div class='animated00-03 fadeInDown messagePIN'>PIN incorrecto</div>");

    setTimeout(function() {
        $(".messagePIN").removeClass("fadeInDown").addClass("fadeOutUp");
        setTimeout(function() {
            $(".messagePIN").remove();
        }, 300)
    }, 4000);
}

function messageProductIncorrect(){
    let content = $(".contPinField");
    $(".messageProductIncorrect").remove();
    content.append("<div class='animated00-03 fadeInDown messageProductIncorrect'>Existen artículos dentro del carrito que corresponden a un catálogo inactivo.</div>");

    setTimeout(function() {
        $(".messageProductIncorrect").removeClass("fadeInDown").addClass("fadeOutUp");
        setTimeout(function() {
            $(".messageProductIncorrect").remove();
        }, 300)
    }, 4000);
}

function validateOrderReason(){
    var element = $(".orderReason").val();
    if (!$.trim(element) || element.substr(0, 1) == " "){
        $(".orderReason").val("");
        $("#checkoutProcesar").attr("disabled", "disabled");
        messageOrderReason();
    }else{
        $("#checkoutProcesar").removeAttr("disabled");
    }

    var elementCharactersLenght = element.length;
    var elementCharactersLimit = $(".orderReason").attr("maxlength");
    if(elementCharactersLimit !== undefined){
        var charactersCounter = $("#charactersCounter");
        charactersCounter.text(elementCharactersLenght +" / "+ elementCharactersLimit);
    }
}

function messageOrderReason(){
    let content = $(".orderReasonContainer");
    $(".messageOrderReason").remove();
    content.append("<div class='animated00-03 fadeInDown messageOrderReason'>Especifique la Razón de Orden</div>");

    setTimeout(function() {
        $(".messageOrderReason").removeClass("fadeInDown").addClass("fadeOutUp");
        setTimeout(function() {
            $(".messageOrderReason").remove();
            $("#checkoutProcesar").removeAttr("disabled");
        }, 300)
    }, 4000);
}

function orderProcess(element) {
    var checkOut = $(".checkout");
    var orderReason = $('.checkout.popUp .orderReason').val();
    if(orderReason != undefined){
        if(orderReason.length == 0){
            validationMessage('', 'orderReasonValidation');
            setTimeout(function() {
                $("#orderReason").removeClass("fadeInDown").addClass("fadeOutUp");
                setTimeout(function() {
                    $("#orderReason").remove();
                }, 300)
            }, 4000);
            return false;
        }
    }else{
        orderReason = "";
    }

    $("#listProductsLoading").hide();

    var data = JSON.parse(sessionStorage.getItem('productsSelected'));
    var userSelected = JSON.parse(sessionStorage.getItem('userSelected'));
    var companyAndBranchSelected = JSON.parse(sessionStorage.getItem('companyAndBranchSelected'));
    var processData = [];

    if(data != null){

        var vendorId = companyAndBranchSelected.vendor.id;
        var PIN = undefined;
        if(PINisActivated()){
            PIN = getPIN();
        }

        processData = {
            "id": userSelected.id,
            "nameUser": userSelected.name,
            "vendorId": vendorId,
            "pin": PIN,
            "selectedCompanyBranchId": companyAndBranchSelected.company.branch.id,
            "paymentMethod": getPaymentMethodsSelectedKey(),
            "subPaymentMethod": getSubPaymentMethodsSelectedKey(),
            "products": []
        };

        if(getIfArsIsAvaliable() == true){
            var arsBenefit = $("#arsBenefit");
            arsBenefit.removeClass("d-block");
            arsBenefit.addClass("d-none");
            var arsBenefitBox = $("#arsBenefitBox");
            arsBenefitBox.removeClass("d-block");
            arsBenefitBox.addClass("d-none");
        }

        for(var i = 0; i < data.length; i++){

            var options = [];
            //var giftCardIds = [];
            var specialRequest = undefined;
            var specialRequestType = undefined;
            var specialRequestList = undefined;
            var cashOrCardValue = 0;

            if(data[i].combo == true || data[i].combo == "true"){
                for(var n = 0; n < data[i].options.length; n++){
                    options.push({"id": data[i].options[n].sectionId, "variantId": data[i].options[n].id});
                }
            }

            //if(data[i].giftCardSelected.length > 0){
            //    for(var n = 0; n < data[i].giftCardSelected.length; n++){
            //        giftCardIds.push(data[i].giftCardSelected[n].id);
            //    }
            //}

            if(data[i].hasVariant == true || data[i].hasVariant == "true"){
                data[i].id = data[i].CombinationSelected.variantId;
            }

            for(var x = 0; x < data[i].benefitsApplied.length; x++){
                if(data[i].benefitsApplied[x].benefitType == "efectivo"){
                    var cashOrCreditTempValue = data[i].benefitsApplied[x].amountToDiscount;

                    if(typeof cashOrCreditTempValue == "string"){
                        cashOrCreditTempValue = parseFloat(cashOrCreditTempValue);
                    }

                    cashOrCreditTempValue.toRound(2);
                    cashOrCardValue = cashOrCreditTempValue;
                }
            }

            if((data[i].hasSpecialRequest == true || data[i].hasSpecialRequest == "true") && data[i].specialRequestsSelected.length > 0){
                if(data[i].specialRequests.specialRequestType == 1){
                    specialRequest = undefined;
                    specialRequestType = 1;
                    specialRequestList = [];
                    for(var n = 0; n < data[i].specialRequestsSelected.length; n++){
                        var specialRequestListSelectedId = data[i].specialRequestsSelected[n].id;

                        specialRequestListSelectedId = specialRequestListSelectedId.replace('TP', '');


                        specialRequestList.push(specialRequestListSelectedId);
                    }

                }else if(data[i].specialRequests.specialRequestType == 2){
                    specialRequestList = undefined;
                    specialRequest = data[i].specialRequestsSelected[0].value || "";
                    specialRequestType = 2;
                }
            }

            var userType = 1;
            if(data[i].userType != 'paysheetAccount'){
                userType = 2;
            }

            var arsCoverage = undefined;
            var arsId = undefined;
            if(getIfArsIsAvaliable() == true){
                for(var c = 0; c < data[i].benefitsApplied.length; c++){
                    if(data[i].benefitsApplied[c].benefitType == "ARS"){
                        arsCoverage = data[i].benefitsApplied[c].amountToDiscount;
                        arsId = data[i].benefitsApplied[c].id;
                    }
                }
            }

            processData.products.push(
                {
                    "itemId": data[i].id, "quantity": data[i].quantity, subTotal: data[i].price, taxTotal: data[i].itbisPriceMarket,
                    "date": data[i].date, "deliveryDate": data[i].deliveryDate, "catalogId": data[i].catalogId, "code": data[i].codeId, "userType": userType,
                    "deliveryTypeId": data[i].deliveryTypeId, "providerId": data[i].providerId, "combo": data[i].combo, "arsCoverage": arsCoverage, "arsId": arsId, "sections": options, "cashOrCardValue": cashOrCardValue,
                    "businessTypeId": data[i].businessType, "orderReason": orderReason, /* "giftCardIds": giftCardIds, */ "hasVariant": data[i].hasVariant,
                }
            );
        }

        data = JSON.stringify(processData);
        var countDownDOM = $("#lateRequest");
        var counter = 0;
        var interval = setInterval(function(){
            try{
                counter++;
                if(counter >= 15){
                    countDownDOM[0].style.display = "block";
                }
            }catch(err){
                if(err.name == "SyntaxError"){
                    throw err.message;
                }else{
                    throw err;
                }
            }
        }, 1000);

        $.ajax({
            type: 'POST',
            url: '/rest/createOrder/createposorder',
            data: data,
            cache: false,
            mimeType: 'application/json',
            contentType: "application/json; charset=utf-8",
            success: function (response, textStatus, request) {
                console.log(response);
                //console.log(textStatus);
                //console.log(request.getResponseHeader('Content-Length'));
                if(response.success == true){
                    if(response.showReceipt == true){
                        showReceipt(response.downloadReceiptUrl);
                        //var isChrome = /Chrome/.test(navigator.userAgent) && /Google Inc/.test(navigator.vendor);
                        //if (isChrome){
                        //    viewPDF(response.downloadReceiptUrl);
                        //}else{
                        //    showOrderProcessed();
                        //}
                    }else{
                        showOrderProcessed();
                    }

                    wasAnOrder = true;
                    sessionStorage.removeItem('userSelected');
                    sessionStorage.removeItem('productsSelected');
                    sessionStorage.removeItem('catalogs');
                    sessionStorage.removeItem('giftCards');
                    sessionStorage.removeItem('newGiftcardValues');
                    sessionStorage.removeItem('catalogSelected');
                    sessionStorage.removeItem('categoriesFilter');
                    sessionStorage.removeItem('cashFlow');
                    sessionStorage.removeItem('userSelectedBenefitsByCatalogsType');
                    $(".letter.active").removeClass("active");
                    $("#searchProductComponent input").val("");
                    var userInfo = $("#userInfo");
                    var contShoppingCart  = $(".contShoppingCart");
                    contShoppingCart[0].classList.add("empty");
                    userInfo.hide();
                    contShoppingCart.removeAttr("style");

                    var accountTypeContainer = $(".accountTypeContainer");
                    accountTypeContainer.hide();
                    $(".tenLastProductsContainer").remove();
                    verticalAlign();
                    //
                    //clearShoppingCart();
                    if(getIfArsIsAvaliable() == true){
                        clearARSBenefit();
                    }
                    hideCheckout();
                    //initApplication();
                    //showOrderCorrect(status, response.redirectUrl, response);

                    var checkOutProcessButton = $("#checkOutProcessButton");
                    checkOutProcessButton.removeAttr("style").html("Confirmar");
                    clearInterval(interval);

                    clearMustache('#userInfo');
                    clearMustache('#listProductsComponent');
                    clearMustache('#catalogsComponent');
                    var companyAndBranchSelected = JSON.parse(sessionStorage.getItem('companyAndBranchSelected')) || null;
                    var isAmmountType = companyAndBranchSelected.provider.ammountType;
                    $("#listProductsComponent").prepend(Mustache.to_html($("#skeletonProducts").html(), {"isAmmountType":isAmmountType}))
                    clearMustache('#tenLastProductsComponent');
                    clearMustache('#categoriesFilterComponent');
                    $("#timeLeftContainer strong").text("00: 00: 00");

                    $(".paymentMethodButtons").removeClass("btn-primary").addClass("btn-secondary");
                    $("#paysheet").removeClass("btn-secondary").addClass("btn-primary");

                }else{

                    switch (response.errorCode){
                        case "Error-002":
                            messagePINIncorrect();
                            break;
                        case "Error-003":
                            messageProductIncorrect();
                            break;
                        default :
                            console.log("ALGO INESPERADO HA SUCEDIDO");
                    }
                    clearInterval(interval);
                    var checkOutProcessButton = $("#checkOutProcessButton");
                    checkOutProcessButton.removeAttr("style").html("Confirmar");
                    checkOutProcessButton.removeAttr("disabled");
                    //errorMessage(errors, 'orderProcessError');
                }
            },
            error: function (jqXHR, textStatus, errorThrown){

                //console.log(jqXHR);
                //console.log(textStatus);
                //console.log(errorThrown);
                var errors = [
                    {
                        "errorMessage": errorThrown
                    },
                    {
                        "errorCode": '#'+jqXHR.status
                    }
                ];
                if(jqXHR.status == 500){
                    console.log(errors);
                    //errorMessage(errors, 'orderProcessError');
                }else{
                    switch (errors.errorCode){
                        case "Error-002":

                            console.log("PIN INCORRECTO");
                            break;
                        case "Error-003":
                            console.log(errors.errorMessage);
                            break;
                        default :
                            console.log("ALGO INESPERADO HA SUCEDIDO");
                    }
                }
                alert('Hubo un error al intentar procesar la orden');
                clearShoppingCart();

                hideCheckout();
            }
        });
    }
}

function showOrderProcessed(){
    let contShoppingCart = $(".contShoppingCart");

    $("#searchUserComponent").children("input[type='text']").focus();
    if(responsive()){
        $("body").prepend("<div class='orderProcessedMessage'>Orden procesada correctamente.</div>");
        setTimeout(function(){
            $(".orderProcessedMessage").hide("slow");
        }, 2000)
    }else{
        contShoppingCart.prepend("<div class='orderProcessedMessage'>Orden procesada correctamente.</div>");
        setTimeout(function(){
            $(".orderProcessedMessage").hide("slow");
        }, 2000)
    }
}

function checkIsPINSetted(){
    var pinField = $("#checkOutBenefitsContainer #pinField");
    if(pinField.length != 0){
        if(pinField[0].value.length == 4){
            return true;
        }else{
            messagePIN();
        }
    }

    return false;
}

function PINisActivated(){
    var companyAndBranchSelected = JSON.parse(sessionStorage.getItem('companyAndBranchSelected')) || null;
    var dataToReturn = false;

    if(companyAndBranchSelected != null){
        if(companyAndBranchSelected.applicableBenefits.otherSettings.showPin == "true" || companyAndBranchSelected.applicableBenefits.otherSettings.showPin == true){
            dataToReturn = true;
        }
    }

    return dataToReturn;
}

function getPIN(){
    var pinField = $("#checkOutBenefitsContainer #pinField");
    if(checkIsPINSetted()){
        return pinField[0].value;
    }
}

function hideCheckout(){
    var checkOut = $(".checkout");
    var modal = $(".modalNew");
    checkOut.remove();
    modal.hide();
}

function showUserBenefits(e){
    var accountSummary = $(".accountSummary");
    if(!accountSummary.hasClass("one")){
        accountSummary.addClass("one");
        accountSummary.height($(".contShoppingCart").height() - $("#userInfo").height());
        if(accountSummary.is(":visible")){
            accountSummary.hide();
            e.stopPropagation();
        }else{
            accountSummary.show();
            if(responsive()){
                showShoppingCartMobile(e);
            }
        }
        $(".accountSummary .btnClose").click(function(){
            accountSummary.removeClass("one");
            accountSummary.hide();
            return false;
        });
    }
}

function setPaymentMethodByDefault(){
    try{
        cashFlowContainerShow()
        var companyAndBranchSelected = JSON.parse(sessionStorage.getItem('companyAndBranchSelected')) || null;
        if(companyAndBranchSelected.vendor.cash == true){
            checkoutCashChangeLabels();
        }else{
            checkoutCardChangeLabels();
        }

    }catch(err){
        throw err;
    }
}

function bothPaymentMethodsAreActiveController(){
    try{
        var companyAndBranchSelected = JSON.parse(sessionStorage.getItem('companyAndBranchSelected')) || null;
        var bothPaymentMethodsActivatedContainer = $("#bothPaymentMethodsActivatedContainer");
        var bothPaymentMethodsActivatedButtons = $(".bothPaymentMethodsButtons");

        bothPaymentMethodsActivatedContainer.show();
        bothPaymentMethodsActivatedButtons.click(function(){
            for(var i = 0; i < bothPaymentMethodsActivatedButtons.length; i++){
                var currentElement = bothPaymentMethodsActivatedButtons[i];
                if(bothPaymentMethodsActivatedButtons[i].id == this.id){
                    currentElement.classList.add("active");
                }else{
                    currentElement.classList.remove("active");
                }
            }
        });
    }catch(err){
        throw err;
    }
}

function checkBothPaymentMethodsAreActive(){
    var companyAndBranchSelected = JSON.parse(sessionStorage.getItem('companyAndBranchSelected')) || null;
    var dataToReturn = false;

    if((companyAndBranchSelected.vendor.cash == true && companyAndBranchSelected.vendor.acceptCard == true) && getAccountTypeSelected() == "paysheetAccount") {
        dataToReturn = true;
    }

    return dataToReturn;
}

function checkIfAPaymentMethodsIsActive(){
    var companyAndBranchSelected = JSON.parse(sessionStorage.getItem('companyAndBranchSelected')) || null;
    var dataToReturn = false;

    if((companyAndBranchSelected.vendor.cash == true || companyAndBranchSelected.vendor.acceptCard == true) && getAccountTypeSelected() == "paysheetAccount") {
        dataToReturn = true;
    }

    return dataToReturn;
}

function checkoutCashChangeLabels(){
    try{
        var cashFlowCashLabel = $("#cashFlowContainer p.efectivo");
        var cashFlowCashLabelAmount = $("#cashFlowContainer strong.floatR");
        cashFlowCashLabel[0].innerHTML = "Efectivo "+"<strong class='floatR'>"+cashFlowCashLabelAmount[0].innerText+"</strong>";
        changeOfCashFieldShow();
    }catch(err){
        throw err;
    }
}

function checkoutCardChangeLabels(){
    try{
        changeOfCashFieldHide();
        var cashFlowCashLabel = $("#cashFlowContainer p.efectivo");
        var cashFlowCashLabelAmount = $("#cashFlowContainer strong.floatR");
        if(cashFlowCashLabel.length != 0){
            cashFlowCashLabel[0].innerHTML = "Tarjeta "+"<strong class='floatR'>"+cashFlowCashLabelAmount[0].innerText+"</strong>";
        }else{
            var detailTotalLabel = $("#totalCheckOut .detailTotals li.efectivo p.efectivo");
            if(detailTotalLabel.length > 0){
                detailTotalLabel[0].innerHTML = "Total Tarjeta";
            }
        }
    }catch(err){
        throw err;
    }
}

function cashFlowContainerShow(){
    var cashFlowContainer = $("#cashFlowContainer");
    cashFlowContainer.addClass("d-inline-block");
    cashFlowContainer.show();
}

function cashFlowContainerHide(){
    var cashFlowContainer = $("#cashFlowContainer");
    cashFlowContainer.removeClass("d-inline-block");
    cashFlowContainer.hide();
}

function changeOfCashFieldShow(){
    var cashFlowContainerInput = $("#cashFlowContainer input");
    var cashFlowContainerInputCashChange = $("#cashFlowContainer #cashChange");

    cashFlowContainerInput.show();
    cashFlowContainerInputCashChange.show();
}

function changeOfCashFieldHide(){
    var cashFlowContainerInput = $("#cashFlowContainer input");
    var cashFlowContainerInputCashChange = $("#cashFlowContainer #cashChange");

    cashFlowContainerInput.hide();
    cashFlowContainerInputCashChange.hide();
}

function messageCashCardNoSelected(){
    let content = $("#bothPaymentMethodsActivatedContainer");
    $(".messageCashCardNoSelected").remove();
    content.after("<div class='animated00-03 fadeInDown messageCashCardNoSelected'>Seleccione el método de pago</div>");

    setTimeout(function() {
        $(".messageCashCardNoSelected").removeClass("fadeInDown").addClass("fadeOutUp");
        setTimeout(function() {
            $(".messageCashCardNoSelected").remove();
        }, 300)
    }, 4000);
}
var messageBeforeAddProductTimeOut;
$(".btnAlertPOSPaymentMethod").on("click", function(e){
    var messageBeforeAddProduct = $(".messageBeforeAddProduct");
    clearTimeout(messageBeforeAddProductTimeOut);
    if(messageBeforeAddProduct.is(':visible')){

        $(".messageBeforeAddProduct").removeClass("fadeInDown").addClass("fadeOutUp");
        verticalAlign();
        setTimeout(function() {
            $(".btnAlertPOSPaymentMethod").removeClass("active").blur();
            $(".messageBeforeAddProduct").hide();
            verticalAlign();
            if(responsive()){
                hideShoppingCartMobile();
            }
        }, 300)
    }else{
        if(responsive()){
            showShoppingCartMobile();
        }
        messageBeforeAddProduct.removeClass("fadeOutUp").addClass("fadeInDown");
        messageBeforeAddProduct.show();

        verticalAlign();
        messageBeforeAddProductTimeOut = setTimeout(function() {
            $(".messageBeforeAddProduct").removeClass("fadeInDown").addClass("fadeOutUp");
            verticalAlign();
            setTimeout(function() {
                $(".btnAlertPOSPaymentMethod").removeClass("active").blur();
                $(".messageBeforeAddProduct").hide();
                verticalAlign();
                if(responsive()){
                    hideShoppingCartMobile();
                }
            }, 300)
        }, 4000)
    }
});

function checkConfID(){
    var target = $("#checkOutProcessButton");
    if(target.attr( "disabled" ) == "disabled"){
        target.removeAttr("disabled");
    }else{
        target.attr("disabled", "disabled")
    }
}