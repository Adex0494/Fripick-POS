import React, { useState } from 'react';
import Box from '@mui/material/Box';
import Modal from '@mui/material/Modal';
import CartTable from '../cart-table';
import { Header, StyledTitle, StyledMoneyText, TableContainer, FlexContainer, SummaryContainer, LeftContainer, DetailContainer, 
  DetailText, PinContainer, StyledTextField, StyledButton, StyledClearIcon, TooltipTitle, ReasonContainer, NumberText, CircularProgressContainer, StyledCircularProgress,
  CashCardSelectorContainer, AmountsContainer 
} from './confirmation-modal.styled'
import { postHttpResponse } from '../../api/helper';
import HtmlTooltip from '../htmlTooltip';
import InfoContainer from '../Info-container';
import CashCardSelector from '../cash-card-selector';
import { paymentMethods } from '../../constants';
import PaymentAmountContainer from '../payment-amount-container';

const style = {
  position: 'absolute',
  top: '50%',
  left: '50%',
  transform: 'translate(-50%, -50%)',
  width: '91%',
  height: '85%',
  bgcolor: 'background.paper',
  border: '2px solid #000',
  borderRadius: '4px',
  boxShadow: 24,
};

export default function BasicModal({toUseSubsidy, amountToProcess, cashOrCardValue, selectedPaymentMethod, setAlert, selectedAccountTypeId, open, subTotal, itbis, setOpen, selectedProducts, employee, balance, companyBranchId}) {
  const [pinValue, setPinValue] = useState('')
  const [openPinTooltip, setOpenPinTooltip] = useState(false)
  const [openCashTooltip, setOpenCashTooltip] = useState(false)
  const [openPaymentMethodTooltip, setOpenPaymentMethodTooltip] = useState(false)
  const [openReasonTooltip, setOpenReasonTooltip] = useState(false)
  const [orderReason, setOrderReason] = useState('')
  const [isLoading, setIsLoading] = useState(false)
  const [cashOrCardMethod, setCashOrCardMethod] = useState() // 1 for cash. 2 for card. Used when paymentmethod is nomina
  const [cashValue, setCashValue] = useState('')



  const postOrder = async (body) => {
    setIsLoading(true)
    try{
        const response = await postHttpResponse('create-order-service/createposorder', body)
    }
    catch(error){
        setAlert({open: true, severity: 'error', message: error?.response?.data?.errorMessage || error?.message || 'Ocurrió un error buscando los datos', duration: 3000})
    }
    setIsLoading(false)
}

  const handleReasonChange = (value) => {
    if (value.length <= 700){
      setOrderReason(value)
    }
  }

  const handleClose = () => {
    setPinValue('');
    setOpenPinTooltip(false);
    setOpenCashTooltip(false);
    setOpenReasonTooltip(false);
    setOrderReason('');
    setCashOrCardMethod()
    setCashValue('')
    setOpen(false);
  }

  const handlePinChange = (value)=>{
    if(value.length > 4) return
    setPinValue(value)
  }

  const handleOpenPinTooltip = () => {
    setOpenPinTooltip(true)
    setTimeout(()=> setOpenPinTooltip(false), 3000)
  }

  const handleOpenCashTooltip = () => {
    setOpenCashTooltip(true)
    setTimeout(()=> setOpenCashTooltip(false), 3000)
  }

  const handleOpenPaymentMethodTooltip = () => {
    setOpenPaymentMethodTooltip(true)
    setTimeout(()=> setOpenPaymentMethodTooltip(false), 3000)
  }

  const handleOpenReasonTooltip = () => {
    setOpenReasonTooltip(true)
    setTimeout(()=> setOpenReasonTooltip(false), 3000)
  }

  const handleConfirm = () => {
    let validation = true
    
    if (pinValue.length < 4){
      handleOpenPinTooltip()
      validation = false
    }

    if (cashOrCardValue && !cashOrCardMethod){
      handleOpenPaymentMethodTooltip()
      validation = false
    }

    if (orderReason.length === 0 && selectedAccountTypeId === 2){
      handleOpenReasonTooltip()
      validation = false
    }

    if ( (cashOrCardMethod === paymentMethods.efectivo && cashOrCardValue && (cashValue === '' || parseInt(cashValue) - cashOrCardValue < 0)) 
        || (selectedPaymentMethod === paymentMethods.efectivo && (cashValue === '' || parseInt(cashValue) - amountToProcess < 0)) ){
      handleOpenCashTooltip()
      validation = false
    }

    if (!validation) return

    const orderProducts = selectedProducts.map(product => {
      return {
        cashOrCardValue: Number(product.cashOrCardValue.toFixed(2)),
        catalogId: product.catalogId,
        combo: product.combo.toString(),
        deliveryDate: product.deliveryDate,
        deliveryTypeId: product.deliveryTypeId,
        itemId: product.id.toString(),
        orderReason,
        providerId: product.providerId,
        quantity: parseInt(product.quantity),
        sections: product.sections,
        subTotal: product.price,
        userType: product.userType
      }
    })
    const payload = {
      id: employee.id,
      nameUser: employee.name,
      paymentMethod: '1',
      pin: pinValue,
      products: orderProducts,
      selectedCompanyBranchId: companyBranchId,
      vendorId: 2829
    }
    postOrder(payload)
  }

  return (
    <div>
      <Modal
        open={open}
        onClose={handleClose}
      >
        <Box sx={style}>
          <FlexContainer>
            <LeftContainer>
              <Header backgroundcolor={selectedAccountTypeId === 1 ? '#6ec4e8' : '#ff8d6a'}>
                <StyledTitle>{employee.name}</StyledTitle>
                <StyledMoneyText>{`RD$ ${balance}`}</StyledMoneyText>
              </Header>
              <TableContainer>
                <CartTable selectedProducts={selectedProducts}/>
              </TableContainer>
            </LeftContainer>
            <SummaryContainer>
              <StyledClearIcon onClick={handleClose}/>
                <AmountsContainer>
                  <DetailContainer>
                    <DetailText>
                      Subtotal
                    </DetailText>
                    <DetailText>
                    {`RD $${subTotal.toFixed(2)}`}
                    </DetailText>
                  </DetailContainer>

                  {Object.entries(itbis).map(entry =><DetailContainer key={entry[0]}>
                    <DetailText>
                      {entry[0]} 
                    </DetailText>
                    <DetailText>
                      {`RD$ ${entry[1].toFixed(2)}`}
                    </DetailText>
                  </DetailContainer> )}

                  <DetailContainer>
                    <DetailText textColor='#6ec4e8'>
                      Subsidio
                    </DetailText>
                    <DetailText textColor='#6ec4e8'>
                    {`RD $${toUseSubsidy.toFixed(2)}`}
                    </DetailText>
                  </DetailContainer>

                  <DetailContainer>
                    <DetailText bold>
                      {selectedPaymentMethod === paymentMethods.nomina && 'Total'}
                      {selectedPaymentMethod === paymentMethods.efectivo && 'Total Efectivo'}
                      {selectedPaymentMethod === paymentMethods.tarjeta && 'Total Tarjeta'}
                    </DetailText>
                    <DetailText bold>
                      {`RD$ ${(amountToProcess).toFixed(2)}`}
                    </DetailText>
                  </DetailContainer>

                  {cashOrCardValue ? <InfoContainer cashOrCardValue={cashOrCardValue}/> : null}
                </AmountsContainer>

              {(cashOrCardValue && selectedPaymentMethod === paymentMethods.nomina) || selectedPaymentMethod === paymentMethods.efectivo ? 
              <CashCardSelectorContainer>
                { cashOrCardValue && selectedPaymentMethod === paymentMethods.nomina ? 
                <CashCardSelector 
                  primaryPaymentMethod={selectedPaymentMethod} 
                  cashValue={cashValue} 
                  setCashValue={setCashValue} 
                  openPaymentMethodTooltip={openPaymentMethodTooltip}
                  openTooltip={openCashTooltip} 
                  amount={cashOrCardValue} 
                  setSecondaryPaymentMethod={setCashOrCardMethod} 
                  selectedSecondaryPaymentMethod={cashOrCardMethod}/> : 
                <PaymentAmountContainer 
                    amount={amountToProcess}
                    primaryPaymentMethod={selectedPaymentMethod}
                    cashValue={cashValue}
                    setCashValue={setCashValue}
                    openTooltip={openCashTooltip}
                />}
              </CashCardSelectorContainer> : null}


              <PinContainer margintop={openPaymentMethodTooltip && 60}>
                <DetailText bold>
                    Digitar Pin
                  </DetailText>
                  <HtmlTooltip arrow open={openPinTooltip} placement='bottom-start' title={<TooltipTitle>Digita el PIN</TooltipTitle>}>
                    <StyledTextField variant="outlined" type='password' value={pinValue} onChange={(e)=>handlePinChange(e.target.value)}
                      inputProps={{
                        style: {fontSize: 24} 
                      }}
                    />
                  </HtmlTooltip>
                  {selectedAccountTypeId === 2 && <ReasonContainer openTooltip={openPinTooltip}>
                    <DetailText align='left' marginBottom={11} >
                      Razón de Orden*
                    </DetailText>
                    <HtmlTooltip arrow open={openReasonTooltip} placement='bottom-start' title={<TooltipTitle>Especifique la Razón de Orden</TooltipTitle>}>
                      <StyledTextField multiline  minRows={2} maxRows={7} variant="outlined" value={orderReason} onChange={(e)=>handleReasonChange(e.target.value)}
                        inputProps={{
                          style: {fontSize: 18} 
                        }}
                      /> 
                    </HtmlTooltip>
                    <NumberText>
                      {`${orderReason.length} / 700`}
                    </NumberText>
                    </ReasonContainer>}
                  <StyledButton openTooltip={(openPinTooltip && selectedAccountTypeId === 1) || (openReasonTooltip && selectedAccountTypeId === 2)} onClick={handleConfirm} variant='contained'>
                    {isLoading ? <CircularProgressContainer><StyledCircularProgress/></CircularProgressContainer> : 'Confirmar'}
                  </StyledButton>
                </PinContainer>
            </SummaryContainer>
          </FlexContainer>
        </Box>
      </Modal>
    </div>
  );
}