import React, {useState} from 'react'
import PropTypes from 'prop-types'
import { CartContainer, StyledEmployeeTitle, StyledEmployeeContainer, StyledEmployeeSubTitle, CartItemsDiv, HeightFillerDiv,
        CartItemContainer, StyledInput, CartItemTitle, CartItemPrice, DeleteIcon, MarginTopDiv, CostContainer, StyledButton,
        ButtonText, ContainerFlex, StyledInfoIcon } from './cart.styled' 
import CreditLimit from '../credit-limit'

const Cart = ({benefits, employeeName, employeeId, employeeBalance, selectedProducts, editProductQuantity, deleteComboCart,
     deleteProductCart, subTotal, itbis, buttonText, setOpenModal}) => {
    const [showCredit, setShowCredit] = useState(false)
    return  <CartContainer>
                <StyledEmployeeContainer>
                    <div>
                        <StyledEmployeeTitle>{employeeName}</StyledEmployeeTitle>
                        <StyledEmployeeSubTitle>{employeeId}</StyledEmployeeSubTitle>
                    </div>
                    {employeeBalance &&<ContainerFlex>
                        <StyledEmployeeSubTitle>{employeeBalance}</StyledEmployeeSubTitle>
                        <StyledInfoIcon onClick={() => setShowCredit(!showCredit)}/>
                    </ContainerFlex>}
                </StyledEmployeeContainer>
                <CartItemsDiv>
                    { showCredit && <CreditLimit balances={benefits ? benefits : null} close={() => setShowCredit(false)}/> }
                    <HeightFillerDiv>
                        {selectedProducts.map(product => <CartItemContainer key={product.selectedProductIndexes ? product.id.toString() + product.selectedProductIndexes.toString() : product.id}> 
                            <StyledInput sx={{ input: { color: '#696969' } }} disableUnderline type='number' value={product.quantity} onChange={(e) => { editProductQuantity(product.id, e.target.value)}}/>
                            <CartItemTitle style={{wordBreak: 'break-word'}}>{product.name}</CartItemTitle>
                            <CartItemPrice>{`RD$ ${product.price}`}</CartItemPrice>
                            <DeleteIcon onClick={() => {product.selectedProductIndexes ? deleteComboCart(product) : deleteProductCart(product.id)}}/> 
                        </CartItemContainer>)}
                    </HeightFillerDiv>
                    {subTotal ? <MarginTopDiv>
                        <CostContainer>
                            <CartItemTitle>Subtotal</CartItemTitle>
                            <CartItemPrice>{`RD$ ${subTotal.toFixed(2)}`}</CartItemPrice>
                        </CostContainer>
                        <CostContainer> 
                            <CartItemTitle>ITBIS (18%)</CartItemTitle>
                            <CartItemPrice>{`RD$ ${itbis.toFixed(2)}`}</CartItemPrice>
                        </CostContainer>
                        
                        <StyledButton onClick={() => setOpenModal(true)} variant='contained'>
                            <ButtonText>
                                {buttonText}
                            </ButtonText>
                            <ButtonText bold>
                            {`RD$ ${(subTotal + itbis).toFixed(2)}`}
                            </ButtonText>
                        </StyledButton>
                    </MarginTopDiv> : null}
                </CartItemsDiv>
            </CartContainer>
}

Cart.propTypes = {
    employeeName: PropTypes.string.isRequired,
    employeeBalance: PropTypes.string.isRequired,
    employeeId: PropTypes.string,
    selectedProducts: PropTypes.array.isRequired,
    editProductQuantity: PropTypes.func.isRequired,
    deleteComboCart: PropTypes.func.isRequired,
    deleteProductCart: PropTypes.func.isRequired,
    subTotal: PropTypes.number,
    itbis: PropTypes.number,
    buttonText: PropTypes.string.isRequired,
    setOpenModal: PropTypes.func
}

export default Cart