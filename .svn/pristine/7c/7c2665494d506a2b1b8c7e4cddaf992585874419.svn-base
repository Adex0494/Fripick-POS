import React from "react";
import { StyledDivFlex, StyledColumn, StyledMainContainer, StyledContainer, StyledButtonsSection, StyledProductsSection, MaxHeightGrid, StyledCircularProgress, CircularProgressContainer,
    LastProductSection, InnerContainer, FlexColumn, StyledMuiTextField, StyledIconContainer, LeftGrid, StyledTitle, StyledSbtitle, TimerSection } from './mainPage.styled'
import FilterButton from '../../components/filter-button';

import CustomDropdown from '../../components/custom-dropdown';
import LastProductsContainer from '../../components/last-products-container';
import CatalogGrid from '../../components/catalog-grid';
import Cart from '../../components/cart';

import BusinessIcon from '@mui/icons-material/Business';
import PersonSearchIcon from '@mui/icons-material/PersonSearch';
import SearchIcon from '@mui/icons-material/Search';
import HighlightOffIcon from '@mui/icons-material/HighlightOff';
import InputAdornment from '@mui/material/InputAdornment';
import Grid from '@mui/material/Grid';
import ComboPage from '../comboPage/comboPage';
import CatalogList from "../../components/catalog-list";
import Timer from "../../components/timer";
import InfoCard from "../../components/info-card";
import ConfirmationModal from "../../components/confirmation-modal";
import Alphabet from "../../components/alphabet";


import Snackbar from '@mui/material/Snackbar';
import MuiAlert from '@mui/material/Alert';


import Box from '@mui/material/Box';

const MainPageBody = ({ filterProductInputValue, selectedProducts, itbis, subTotal,
    companies, users, lastProductsOrdered, theme, goToComboPage, selectedComboItem,
    selectedCompany, companyBranchId, selectedEmployee, addProductToCart, isLoading,
    deleteComboCart, editProductQuantity, deleteProductCart, handleCloseAlert, alert, setAlert,
    comboSelectedHandler, timeLeft, categories, categoriesSelected, toggleCategory,
    clearComboPage, addComboToCartHandler, changeCompanyHandler, setFilterProductInputValue,
    changeEmployeeHandler, benefits, companyAccountBenefits, catalogList, selectedCatalogIndex, setSelectedCatalogIndex,
    openModal, setOpenModal, selectedLetter, setSelectedLetter, selectedAccountTypeId, setSelectedAccountTypeId, selectedPaymentMethod,
    setSelectedPaymentMethod
 }) => {


        const renderOption = (props, option) =>{
            return <Box component="li" {...props}>
                    <StyledTitle variant='subtitle2'> {option.name} </StyledTitle> <StyledSbtitle variant='caption'> ({option.employeeCode}) </StyledSbtitle>
                  </Box>
          }

          const Alert = React.forwardRef(function Alert(props, ref) {
            return <MuiAlert elevation={6} ref={ref} variant="filled" {...props} />;
          });
          
    return (
        <StyledMainContainer>
            <ConfirmationModal employeeName={selectedEmployee.name} selectedProducts={selectedProducts} balance={benefits?.availableBalance || 0} open={openModal} setOpen={setOpenModal}/>
            <Snackbar open={alert.open} autoHideDuration={alert.duration} onClose={handleCloseAlert}>
                <Alert onClose={handleCloseAlert} severity={alert.severity} sx={{ width: '100%' }}>
                {alert.message}
                </Alert>
            </Snackbar>
            <InnerContainer>
                {goToComboPage ? <ComboPage setAlert={setAlert} companyBranchId={companyBranchId} clearComboPage={clearComboPage} catalogId={catalogList[selectedCatalogIndex]?.id} addComboToCartHandler={addComboToCartHandler} selectedComboItem={selectedComboItem}/> : 
                <MaxHeightGrid container spacing={3} >
                    <LeftGrid item xs={9}>
                        <FlexColumn>
                            <StyledColumn>
                                <StyledDivFlex>
                                    <StyledContainer style={{width: '100%'}}>
                                        <CustomDropdown onChange={(e, newValue) => {changeCompanyHandler(newValue)}} value={selectedCompany} color="#6ec4e8" label='Seleccione una empresa' options={companies} noOptionsText='Ninguna empresa encontrada' 
                                        labelPropName='companyName' Icon={BusinessIcon}  />
                                    </StyledContainer>
                                    <StyledContainer>
                                        <CustomDropdown renderOption={renderOption} onChange={(e, newValue) => {changeEmployeeHandler(newValue)}} value={selectedEmployee} color={theme.palette.secondary.main} label='Introduzca Nombre o Código de empleado' options={users} noOptionsText='Ningun empleado encontrado' 
                                        labelPropName='name' Icon={PersonSearchIcon}  />
                                    </StyledContainer>
                                </StyledDivFlex>
                                <StyledDivFlex>
                                    <StyledContainer>
                                        <StyledMuiTextField
                                            value={filterProductInputValue}
                                            onChange={(e) => setFilterProductInputValue(e.target.value)}
                                            label="Introduzca Nombre del Producto"
                                            InputLabelProps={{
                                                style: { color: theme.palette.primary.main},
                                              }}
                                            InputProps={{
                                                endAdornment: <InputAdornment position="end">
                                                                <StyledIconContainer color={theme.palette.primary.main}>
                                                                    <SearchIcon style={{width: '32px', height: '32px'}}/>
                                                                </StyledIconContainer>
                                            </InputAdornment>,
                                            }}
                                        />
                                    </StyledContainer>
                                    <StyledContainer>
                                        {catalogList?.length > 0 && <StyledButtonsSection>
                                            <StyledDivFlex>
                                                {categories.map(category => <FilterButton key={category.name} color={category.color} label={category.name} 
                                                    selected={categoriesSelected[category.name]} onClickHandler={toggleCategory}/>)}
                                            </StyledDivFlex>
                                        </StyledButtonsSection> }
                                    </StyledContainer>
                                </StyledDivFlex>
                                <CatalogList catalogNameList={catalogList.map(catalog => catalog.name)} setSelectedCatalogIndex={setSelectedCatalogIndex}/>
                            </StyledColumn>
    
                           {lastProductsOrdered?.length > 0 &&  <LastProductSection>
                                <LastProductsContainer color={theme.palette.secondary.main} label='Últimos productos ordenados' lastProducts={lastProductsOrdered} productFunc={addProductToCart}/>
                            </LastProductSection> }

                            <TimerSection>
                                <Timer title='Tiempo Restante' time={timeLeft}/>
                            </TimerSection>

                            <Alphabet selectedLetter={selectedLetter} setSelectedLetter={setSelectedLetter} />
                            
                            <StyledProductsSection>
                                {isLoading ? <CircularProgressContainer><StyledCircularProgress/></CircularProgressContainer>: !selectedEmployee.name ? <InfoCard Icon={PersonSearchIcon} color={theme.palette.secondary.main} text={'Busca el usuario a quien deseas ordenarle'}/> : 
                                 catalogList?.length ===0 ? <InfoCard Icon={HighlightOffIcon} color={theme.palette.secondary.main} text={'¡Este catálogo está inactivo!'}/> : <CatalogGrid selectedLetter={selectedLetter} categoriesSelected={categoriesSelected} catalog={catalogList[selectedCatalogIndex]?.items} filterProductInputValue={filterProductInputValue}
                                 comboSelectedHandler={comboSelectedHandler} productSelectedHandler={addProductToCart} comboColor="#6ec4e8" productColor='#acb4b9'/>}
                            </StyledProductsSection>
                        </FlexColumn>
                    </LeftGrid>
    
                    <Grid item xs={3}>
                        <Cart setSelectedPaymentMethod={setSelectedPaymentMethod} selectedPaymentMethod={selectedPaymentMethod} isCompanyAccount={selectedEmployee.companyAccount} 
                            employeeName={selectedEmployee.name || ''} employeeId={selectedEmployee.employeeCode} benefits={selectedAccountTypeId === 1 ? benefits?.benefits : companyAccountBenefits?.benefits} 
                            employeeBalance={selectedAccountTypeId === 1 ? benefits?.availableBalance ? `RD$ ${benefits?.availableBalance}` : '' : companyAccountBenefits?.availableBalance ? `RD$ ${companyAccountBenefits?.availableBalance}` : ''}
                            selectedProducts={selectedProducts} 
                            editProductQuantity={editProductQuantity} deleteComboCart={deleteComboCart} deleteProductCart={deleteProductCart} subTotal={subTotal} 
                            itbis={itbis} buttonText='Procesar' setOpenModal={setOpenModal} selectedAccountTypeId={selectedAccountTypeId} setSelectedAccountTypeId={setSelectedAccountTypeId}/>
                    </Grid>
                </MaxHeightGrid>}
            </InnerContainer>
        </StyledMainContainer>)
}

export default MainPageBody