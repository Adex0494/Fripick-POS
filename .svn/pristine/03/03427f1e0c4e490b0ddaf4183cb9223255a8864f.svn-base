import React, {useState, } from 'react'
import PropTypes from 'prop-types'
import { CartContainer, StyledEmployeeTitle, StyledEmployeeContainer, StyledEmployeeSubTitle, CartItemsDiv, HeightFillerDiv,
        CartItemContainer, StyledInput, CartItemTitle, CartItemPrice, DeleteIcon, MarginTopDiv, CostContainer, StyledButton,
        ButtonText, ContainerFlex, StyledInfoIcon, EmployeeRowContainer, SubsidyText } from './cart.styled' 
import CreditLimit from '../credit-limit'
import AccountSelector from "../../components/account-selector";
import PaymentMethod from '../payment-method';
import InfoContainer from '../Info-container';

const Cart = ({cashOrCardValue, amountToProcess, toUseSubsidy, benefits, employeeName, employeeId, employeeBalance, selectedProducts, editProductQuantity, deleteComboCart, selectedPaymentMethod,
     setSelectedPaymentMethod, deleteProductCart, subTotal, itbis, buttonText, setOpenModal, isCompanyAccount, selectedAccountTypeId, setSelectedAccountTypeId}) => {
    const [showCredit, setShowCredit] = useState(false)

    return  <CartContainer>
                { <StyledEmployeeContainer backgroundColor={selectedAccountTypeId ===1 ? '#6ec4e8' : '#ff8d6a'}>
                    <EmployeeRowContainer>
                        <div>
                            <StyledEmployeeTitle>{employeeName}</StyledEmployeeTitle>
                            <StyledEmployeeSubTitle>{employeeId}</StyledEmployeeSubTitle>
                        </div>
                        <ContainerFlex>
                            <StyledEmployeeSubTitle>{employeeBalance || 'RD$ 0.00'}</StyledEmployeeSubTitle>
                            <StyledInfoIcon onClick={() => setShowCredit(!showCredit)}/>
                        </ContainerFlex>
                    </EmployeeRowContainer>
                    {isCompanyAccount && <AccountSelector selectedAccountTypeId={selectedAccountTypeId} setSelectedAccountTypeId={setSelectedAccountTypeId}/>}
                </StyledEmployeeContainer> }
                {selectedAccountTypeId === 1 && <PaymentMethod selectedPaymentMethod={selectedPaymentMethod} setSelectedPaymentMethod={setSelectedPaymentMethod}/>}
                <CartItemsDiv>
                    { showCredit && <CreditLimit balances={benefits?.benefits || null} close={() => setShowCredit(false)}/> }
                    <HeightFillerDiv>
                        {selectedProducts.map(product => <CartItemContainer key={product.selectedProductIndexes ? product.id.toString() + product.selectedProductIndexes.toString() : product.id}> 
                            <StyledInput sx={{ input: { color: '#696969' } }} disableUnderline type='number' value={product.quantity} onChange={(e) => { editProductQuantity(product.id, e.target.value)}}/>
                            <CartItemTitle style={{wordBreak: 'break-word'}}>{product.name}</CartItemTitle>
                            <CartItemPrice>{`RD$ ${(product.price * product.quantity).toFixed(2)}`}</CartItemPrice>
                            <DeleteIcon onClick={() => {product.selectedProductIndexes ? deleteComboCart(product) : deleteProductCart(product.id)}}/> 
                        </CartItemContainer>)}
                    </HeightFillerDiv>
                    {subTotal ? <MarginTopDiv>
                        {cashOrCardValue ? <InfoContainer cashOrCardValue={cashOrCardValue}/> : null}
                        <CostContainer>
                            <CartItemTitle>Subtotal</CartItemTitle>
                            <CartItemPrice>{`RD$ ${subTotal.toFixed(2)}`}</CartItemPrice>
                        </CostContainer>
                        {Object.entries(itbis).map(entry =><CostContainer key={entry[0]}>
                            <CartItemTitle>{entry[0]}</CartItemTitle>
                            <CartItemPrice>{`RD$ ${entry[1].toFixed(2)}`}</CartItemPrice>
                        </CostContainer>)}
                        {toUseSubsidy ? <CostContainer>
                            <SubsidyText textColor='#6ec4e8'>Subsidio</SubsidyText>
                            <SubsidyText textColor='#6ec4e8'>{`RD$ ${toUseSubsidy.toFixed(2)}`}</SubsidyText>
                        </CostContainer> : null}
                        <StyledButton onClick={() => setOpenModal(true)} variant='contained'>
                            <ButtonText>
                                {buttonText}
                            </ButtonText>
                            <ButtonText bold>
                            {`RD$ ${amountToProcess.toFixed(2)}`}
                            </ButtonText>
                        </StyledButton>
                    </MarginTopDiv> : null}
                </CartItemsDiv>
            </CartContainer>
}

Cart.propTypes = {
    employeeName: PropTypes.string.isRequired,
    employeeBalance: PropTypes.string.isRequired,
    employeeId: PropTypes.string,
    selectedProducts: PropTypes.array.isRequired,
    editProductQuantity: PropTypes.func.isRequired,
    deleteComboCart: PropTypes.func.isRequired,
    deleteProductCart: PropTypes.func.isRequired,
    subTotal: PropTypes.number,
    toUseSubsidy: PropTypes.number,
    amountToProcess: PropTypes.number,
    cashOrCardValue: PropTypes.number,
    itbis: PropTypes.object,
    buttonText: PropTypes.string.isRequired,
    setOpenModal: PropTypes.func,
    isCompanyAccount: PropTypes.bool,
    setSelectedAccountTypeId: PropTypes.func,
    selectedAccountTypeId: PropTypes.number,
    selectedPaymentMethod: PropTypes.number,
    setSelectedPaymentMethod: PropTypes.func,
}

export default Cart